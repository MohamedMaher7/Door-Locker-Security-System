
FinalProject_MC1_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00002db0  00002e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000ec  008000ec  00002ed0  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00002ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000109b  00000000  00000000  000054ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006587  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000066c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006837  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000936b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a118  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a505  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 26 14 	jmp	0x284c	; 0x284c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ee       	ldi	r26, 0xE4	; 228
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 ee       	ldi	r24, 0xE4	; 228
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                               Main Function                                 *
 *******************************************************************************/

void main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a1 97       	sbiw	r28, 0x21	; 33
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * 2.Eight bits data mode
	 * 3.One stop bit
	 * 4.No parity bits
	 */

	UART_ConfigType UART = {BAUD_RATE_9600, EIGHT_BITS, ONE, DISABLED};
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	8e 8f       	std	Y+30, r24	; 0x1e
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8f 8f       	std	Y+31, r24	; 0x1f
     b62:	18 a2       	std	Y+32, r1	; 0x20
     b64:	19 a2       	std	Y+33, r1	; 0x21

	/*
	 * PORTS Configuration
	 */
	KEYPAD_PORT_DIR = 0; /* PORTA is input port */
     b66:	ea e3       	ldi	r30, 0x3A	; 58
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
	LCD_DATA_PORT_DIR = 0xF0; /*Upper pins of PORTC are output pins, lower pins are not used*/
     b6c:	e4 e3       	ldi	r30, 0x34	; 52
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 ef       	ldi	r24, 0xF0	; 240
     b72:	80 83       	st	Z, r24
	/*
	 * LCD pins configuration PORTD
	 */
	SET_BIT(LCD_CTRL_PORT_DIR,RS);
     b74:	a1 e3       	ldi	r26, 0x31	; 49
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e1 e3       	ldi	r30, 0x31	; 49
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 61       	ori	r24, 0x10	; 16
     b80:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT_DIR,RW);
     b82:	a1 e3       	ldi	r26, 0x31	; 49
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e1 e3       	ldi	r30, 0x31	; 49
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT_DIR,E);
     b90:	a1 e3       	ldi	r26, 0x31	; 49
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e1 e3       	ldi	r30, 0x31	; 49
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	8c 93       	st	X, r24
	/*
	 * MODULES INITIALIZATION
	 */
	LCD_init(); //LCD initialization
     b9e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <LCD_init>
	UART_init(&UART); //UART initialization using configuration structure
     ba2:	ce 01       	movw	r24, r28
     ba4:	4e 96       	adiw	r24, 0x1e	; 30
     ba6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <UART_init>
	/*
	 * Assigning the call back function of the UART
	 * On UART interrupt, setDisplayMessage function is called
	 */
	UART_setCallBack(setDisplayMessage);
     baa:	80 e1       	ldi	r24, 0x10	; 16
     bac:	9a e0       	ldi	r25, 0x0A	; 10
     bae:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <UART_setCallBack>
	/*
	 * Enable global interrupt
	 */
	SREG |= (1<<7);
     bb2:	af e5       	ldi	r26, 0x5F	; 95
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ef e5       	ldi	r30, 0x5F	; 95
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 68       	ori	r24, 0x80	; 128
     bbe:	8c 93       	st	X, r24
	/*
	 * Asking user to enter new password on first-time operation
	 */
	EnterNewPassword();
     bc0:	0e 94 52 07 	call	0xea4	; 0xea4 <EnterNewPassword>
	while(1)
	{
		/*
		 * Display "Enter new password"
		 */
		if(g_displayMessage == ENTER_NEW_PASSWORD)
     bc4:	80 91 f0 00 	lds	r24, 0x00F0
     bc8:	8e 3f       	cpi	r24, 0xFE	; 254
     bca:	19 f4       	brne	.+6      	; 0xbd2 <main+0x8c>
		{
			EnterNewPassword();
     bcc:	0e 94 52 07 	call	0xea4	; 0xea4 <EnterNewPassword>
     bd0:	f9 cf       	rjmp	.-14     	; 0xbc4 <main+0x7e>
		}
		/*
		 * Display re-enter password
		 */
		else if(g_displayMessage == RE_ENTER_PASSWORD)
     bd2:	80 91 f0 00 	lds	r24, 0x00F0
     bd6:	86 3f       	cpi	r24, 0xF6	; 246
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <main+0x9a>
		{
			ReEnterPassword();
     bda:	0e 94 0e 08 	call	0x101c	; 0x101c <ReEnterPassword>
     bde:	f2 cf       	rjmp	.-28     	; 0xbc4 <main+0x7e>
		}
		/*
		 * Display Main Options
		 */
		else if(g_displayMessage == MAIN_OPTIONS)
     be0:	80 91 f0 00 	lds	r24, 0x00F0
     be4:	8d 3f       	cpi	r24, 0xFD	; 253
     be6:	09 f0       	breq	.+2      	; 0xbea <main+0xa4>
     be8:	02 c1       	rjmp	.+516    	; 0xdee <main+0x2a8>
		{
			/*
			 * clear screen and display + Change PW
			 *                          - Open Door
			 */
			LCD_clearScreen();
     bea:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
			LCD_displayString("+ Change PW");
     bf6:	80 e6       	ldi	r24, 0x60	; 96
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
			LCD_goToRowColumn(1,0);
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
			LCD_displayString("- Open Door  ");
     c06:	8c e6       	ldi	r24, 0x6C	; 108
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
			/*
			 * get chosen option from the user
			 */
			chosenOption = KeyPad_getPressedKey();
     c0e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <KeyPad_getPressedKey>
     c12:	8d 8f       	std	Y+29, r24	; 0x1d
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e8       	ldi	r25, 0x80	; 128
     c18:	ab eb       	ldi	r26, 0xBB	; 187
     c1a:	b4 e4       	ldi	r27, 0x44	; 68
     c1c:	89 8f       	std	Y+25, r24	; 0x19
     c1e:	9a 8f       	std	Y+26, r25	; 0x1a
     c20:	ab 8f       	std	Y+27, r26	; 0x1b
     c22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c24:	69 8d       	ldd	r22, Y+25	; 0x19
     c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	4a e7       	ldi	r20, 0x7A	; 122
     c32:	53 e4       	ldi	r21, 0x43	; 67
     c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	8d 8b       	std	Y+21, r24	; 0x15
     c3e:	9e 8b       	std	Y+22, r25	; 0x16
     c40:	af 8b       	std	Y+23, r26	; 0x17
     c42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c44:	6d 89       	ldd	r22, Y+21	; 0x15
     c46:	7e 89       	ldd	r23, Y+22	; 0x16
     c48:	8f 89       	ldd	r24, Y+23	; 0x17
     c4a:	98 8d       	ldd	r25, Y+24	; 0x18
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e8       	ldi	r20, 0x80	; 128
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c58:	88 23       	and	r24, r24
     c5a:	2c f4       	brge	.+10     	; 0xc66 <main+0x120>
		__ticks = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9c 8b       	std	Y+20, r25	; 0x14
     c62:	8b 8b       	std	Y+19, r24	; 0x13
     c64:	3f c0       	rjmp	.+126    	; 0xce4 <main+0x19e>
	else if (__tmp > 65535)
     c66:	6d 89       	ldd	r22, Y+21	; 0x15
     c68:	7e 89       	ldd	r23, Y+22	; 0x16
     c6a:	8f 89       	ldd	r24, Y+23	; 0x17
     c6c:	98 8d       	ldd	r25, Y+24	; 0x18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	3f ef       	ldi	r19, 0xFF	; 255
     c72:	4f e7       	ldi	r20, 0x7F	; 127
     c74:	57 e4       	ldi	r21, 0x47	; 71
     c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c7a:	18 16       	cp	r1, r24
     c7c:	4c f5       	brge	.+82     	; 0xcd0 <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7e:	69 8d       	ldd	r22, Y+25	; 0x19
     c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e2       	ldi	r20, 0x20	; 32
     c8c:	51 e4       	ldi	r21, 0x41	; 65
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	9c 8b       	std	Y+20, r25	; 0x14
     ca4:	8b 8b       	std	Y+19, r24	; 0x13
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <main+0x180>
     ca8:	89 e1       	ldi	r24, 0x19	; 25
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9a 8b       	std	Y+18, r25	; 0x12
     cae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb0:	89 89       	ldd	r24, Y+17	; 0x11
     cb2:	9a 89       	ldd	r25, Y+18	; 0x12
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <main+0x16e>
     cb8:	9a 8b       	std	Y+18, r25	; 0x12
     cba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbc:	8b 89       	ldd	r24, Y+19	; 0x13
     cbe:	9c 89       	ldd	r25, Y+20	; 0x14
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	9c 8b       	std	Y+20, r25	; 0x14
     cc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc6:	8b 89       	ldd	r24, Y+19	; 0x13
     cc8:	9c 89       	ldd	r25, Y+20	; 0x14
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	69 f7       	brne	.-38     	; 0xca8 <main+0x162>
     cce:	14 c0       	rjmp	.+40     	; 0xcf8 <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd0:	6d 89       	ldd	r22, Y+21	; 0x15
     cd2:	7e 89       	ldd	r23, Y+22	; 0x16
     cd4:	8f 89       	ldd	r24, Y+23	; 0x17
     cd6:	98 8d       	ldd	r25, Y+24	; 0x18
     cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	9c 8b       	std	Y+20, r25	; 0x14
     ce2:	8b 8b       	std	Y+19, r24	; 0x13
     ce4:	8b 89       	ldd	r24, Y+19	; 0x13
     ce6:	9c 89       	ldd	r25, Y+20	; 0x14
     ce8:	98 8b       	std	Y+16, r25	; 0x10
     cea:	8f 87       	std	Y+15, r24	; 0x0f
     cec:	8f 85       	ldd	r24, Y+15	; 0x0f
     cee:	98 89       	ldd	r25, Y+16	; 0x10
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <main+0x1aa>
     cf4:	98 8b       	std	Y+16, r25	; 0x10
     cf6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1500);
			/*
			 * display chosen option
			 */
			LCD_displayCharacter(chosenOption);
     cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cfa:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_displayCharacter>
			/*
			 * send chosen option to MC2
			 */
			UART_sendByte(chosenOption);
     cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <UART_sendByte>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e8       	ldi	r25, 0x80	; 128
     d0c:	ab eb       	ldi	r26, 0xBB	; 187
     d0e:	b4 e4       	ldi	r27, 0x44	; 68
     d10:	8b 87       	std	Y+11, r24	; 0x0b
     d12:	9c 87       	std	Y+12, r25	; 0x0c
     d14:	ad 87       	std	Y+13, r26	; 0x0d
     d16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	4a e7       	ldi	r20, 0x7A	; 122
     d26:	53 e4       	ldi	r21, 0x43	; 67
     d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	8f 83       	std	Y+7, r24	; 0x07
     d32:	98 87       	std	Y+8, r25	; 0x08
     d34:	a9 87       	std	Y+9, r26	; 0x09
     d36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d38:	6f 81       	ldd	r22, Y+7	; 0x07
     d3a:	78 85       	ldd	r23, Y+8	; 0x08
     d3c:	89 85       	ldd	r24, Y+9	; 0x09
     d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4c:	88 23       	and	r24, r24
     d4e:	2c f4       	brge	.+10     	; 0xd5a <main+0x214>
		__ticks = 1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9e 83       	std	Y+6, r25	; 0x06
     d56:	8d 83       	std	Y+5, r24	; 0x05
     d58:	3f c0       	rjmp	.+126    	; 0xdd8 <main+0x292>
	else if (__tmp > 65535)
     d5a:	6f 81       	ldd	r22, Y+7	; 0x07
     d5c:	78 85       	ldd	r23, Y+8	; 0x08
     d5e:	89 85       	ldd	r24, Y+9	; 0x09
     d60:	9a 85       	ldd	r25, Y+10	; 0x0a
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	3f ef       	ldi	r19, 0xFF	; 255
     d66:	4f e7       	ldi	r20, 0x7F	; 127
     d68:	57 e4       	ldi	r21, 0x47	; 71
     d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d6e:	18 16       	cp	r1, r24
     d70:	4c f5       	brge	.+82     	; 0xdc4 <main+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d72:	6b 85       	ldd	r22, Y+11	; 0x0b
     d74:	7c 85       	ldd	r23, Y+12	; 0x0c
     d76:	8d 85       	ldd	r24, Y+13	; 0x0d
     d78:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e2       	ldi	r20, 0x20	; 32
     d80:	51 e4       	ldi	r21, 0x41	; 65
     d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	bc 01       	movw	r22, r24
     d8c:	cd 01       	movw	r24, r26
     d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	9e 83       	std	Y+6, r25	; 0x06
     d98:	8d 83       	std	Y+5, r24	; 0x05
     d9a:	0f c0       	rjmp	.+30     	; 0xdba <main+0x274>
     d9c:	89 e1       	ldi	r24, 0x19	; 25
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	8b 83       	std	Y+3, r24	; 0x03
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	9c 81       	ldd	r25, Y+4	; 0x04
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <main+0x262>
     dac:	9c 83       	std	Y+4, r25	; 0x04
     dae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dba:	8d 81       	ldd	r24, Y+5	; 0x05
     dbc:	9e 81       	ldd	r25, Y+6	; 0x06
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	69 f7       	brne	.-38     	; 0xd9c <main+0x256>
     dc2:	00 cf       	rjmp	.-512    	; 0xbc4 <main+0x7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc4:	6f 81       	ldd	r22, Y+7	; 0x07
     dc6:	78 85       	ldd	r23, Y+8	; 0x08
     dc8:	89 85       	ldd	r24, Y+9	; 0x09
     dca:	9a 85       	ldd	r25, Y+10	; 0x0a
     dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <main+0x29e>
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	eb ce       	rjmp	.-554    	; 0xbc4 <main+0x7e>
			_delay_ms(1500);
		}
		/*
		 * Display Enter Old PW
		 */
		else if(g_displayMessage == ENTER_OLD_PASSWORD)
     dee:	80 91 f0 00 	lds	r24, 0x00F0
     df2:	8c 3f       	cpi	r24, 0xFC	; 252
     df4:	19 f4       	brne	.+6      	; 0xdfc <main+0x2b6>
		{
			EnterOldPassword();
     df6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <EnterOldPassword>
     dfa:	e4 ce       	rjmp	.-568    	; 0xbc4 <main+0x7e>
		}
		/*
		 * Display Enter Your Password
		 */
		else if(g_displayMessage == ENTER_YOUR_PASSWORD)
     dfc:	80 91 f0 00 	lds	r24, 0x00F0
     e00:	8b 3f       	cpi	r24, 0xFB	; 251
     e02:	19 f4       	brne	.+6      	; 0xe0a <main+0x2c4>
		{
			EnterYourPassword();
     e04:	0e 94 c6 08 	call	0x118c	; 0x118c <EnterYourPassword>
     e08:	dd ce       	rjmp	.-582    	; 0xbc4 <main+0x7e>
		}
		/*
		 * Display "Opening"
		 */
		else if(g_displayMessage == OPENING)
     e0a:	80 91 f0 00 	lds	r24, 0x00F0
     e0e:	8a 3f       	cpi	r24, 0xFA	; 250
     e10:	79 f4       	brne	.+30     	; 0xe30 <main+0x2ea>
		{
			LCD_clearScreen();
     e12:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
			LCD_displayString("Opening...");
     e1e:	8a e7       	ldi	r24, 0x7A	; 122
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
			/*
			 * keep in this state until it changes
			 * in order not to keep entering this state and keeps writing "opening"
			 * on the lcd
			 */
			while(g_displayMessage == OPENING);
     e26:	80 91 f0 00 	lds	r24, 0x00F0
     e2a:	8a 3f       	cpi	r24, 0xFA	; 250
     e2c:	e1 f3       	breq	.-8      	; 0xe26 <main+0x2e0>
     e2e:	ca ce       	rjmp	.-620    	; 0xbc4 <main+0x7e>
		}
		/*
		 * Display "door is opened"
		 */
		else if(g_displayMessage == DOOR_IS_OPENED)
     e30:	80 91 f0 00 	lds	r24, 0x00F0
     e34:	89 3f       	cpi	r24, 0xF9	; 249
     e36:	79 f4       	brne	.+30     	; 0xe56 <main+0x310>
		{
			LCD_clearScreen();
     e38:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
			LCD_displayString("Door is opened.");
     e44:	85 e8       	ldi	r24, 0x85	; 133
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
			/*
			 * keep in this state until it changes
			 * in order not to keep entering this state and keeps writing "door is opened"
			 * on the lcd
			 */
			while(g_displayMessage == DOOR_IS_OPENED);
     e4c:	80 91 f0 00 	lds	r24, 0x00F0
     e50:	89 3f       	cpi	r24, 0xF9	; 249
     e52:	e1 f3       	breq	.-8      	; 0xe4c <main+0x306>
     e54:	b7 ce       	rjmp	.-658    	; 0xbc4 <main+0x7e>
		}
		/*
		 * display "closing"
		 */
		else if(g_displayMessage == CLOSING)
     e56:	80 91 f0 00 	lds	r24, 0x00F0
     e5a:	88 3f       	cpi	r24, 0xF8	; 248
     e5c:	79 f4       	brne	.+30     	; 0xe7c <main+0x336>
		{
			LCD_clearScreen();
     e5e:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
			LCD_displayString("Closing...");
     e6a:	85 e9       	ldi	r24, 0x95	; 149
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
			/*
			 * keep in this state until it changes
			 * in order not to keep entering this state and keeps writing "closing"
			 * on the lcd
			 */
			while(g_displayMessage == CLOSING);
     e72:	80 91 f0 00 	lds	r24, 0x00F0
     e76:	88 3f       	cpi	r24, 0xF8	; 248
     e78:	e1 f3       	breq	.-8      	; 0xe72 <main+0x32c>
     e7a:	a4 ce       	rjmp	.-696    	; 0xbc4 <main+0x7e>
		}
		/*
		 * DISPLAY "ERROR!!"
		 */
		else if(g_displayMessage == ERROR_STATE)
     e7c:	80 91 f0 00 	lds	r24, 0x00F0
     e80:	87 3f       	cpi	r24, 0xF7	; 247
     e82:	09 f0       	breq	.+2      	; 0xe86 <main+0x340>
     e84:	9f ce       	rjmp	.-706    	; 0xbc4 <main+0x7e>
		{
			LCD_clearScreen();
     e86:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
			LCD_goToRowColumn(0,0);
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
			LCD_displayString("ERROR!!");
     e92:	80 ea       	ldi	r24, 0xA0	; 160
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
			/*
			 * keep in this state until it changes
			 * in order not to keep entering this state and keeps writing "ERROR!!"
			 * on the lcd
			 */
			while(g_displayMessage == ERROR_STATE);
     e9a:	80 91 f0 00 	lds	r24, 0x00F0
     e9e:	87 3f       	cpi	r24, 0xF7	; 247
     ea0:	e1 f3       	breq	.-8      	; 0xe9a <main+0x354>
     ea2:	90 ce       	rjmp	.-736    	; 0xbc4 <main+0x7e>

00000ea4 <EnterNewPassword>:
 * 	2. Displays '*'
 * 	3. Sends entered password to MC2
 */

void EnterNewPassword(void)
{
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	65 97       	sbiw	r28, 0x15	; 21
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
	 */
	uint8 password[PASSWORD_SIZE],i;
	/*
	 * Display "Enter new password"
	 */
	LCD_clearScreen();
     ebc:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
	LCD_goToRowColumn(0,0);
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
	LCD_displayString("Enter New PW :");
     ec8:	88 ea       	ldi	r24, 0xA8	; 168
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
	LCD_goToRowColumn(1,0);
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
	/*
	 * get number of characters from user equal to PASSWORD_SIZE
	 */
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
     ed8:	1f 86       	std	Y+15, r1	; 0x0f
     eda:	91 c0       	rjmp	.+290    	; 0xffe <EnterNewPassword+0x15a>
	{
		password[i] = KeyPad_getPressedKey(); //get input from user number by number
     edc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ede:	08 2f       	mov	r16, r24
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <KeyPad_getPressedKey>
     ee6:	28 2f       	mov	r18, r24
     ee8:	ce 01       	movw	r24, r28
     eea:	40 96       	adiw	r24, 0x10	; 16
     eec:	fc 01       	movw	r30, r24
     eee:	e0 0f       	add	r30, r16
     ef0:	f1 1f       	adc	r31, r17
     ef2:	20 83       	st	Z, r18
		LCD_displayCharacter('*'); //display * for each entered character
     ef4:	8a e2       	ldi	r24, 0x2A	; 42
     ef6:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_displayCharacter>
		UART_sendByte(password[i]); //send entered password to MC2
     efa:	8f 85       	ldd	r24, Y+15	; 0x0f
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	ce 01       	movw	r24, r28
     f02:	40 96       	adiw	r24, 0x10	; 16
     f04:	fc 01       	movw	r30, r24
     f06:	e2 0f       	add	r30, r18
     f08:	f3 1f       	adc	r31, r19
     f0a:	80 81       	ld	r24, Z
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <UART_sendByte>
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	aa e7       	ldi	r26, 0x7A	; 122
     f1a:	b5 e4       	ldi	r27, 0x45	; 69
     f1c:	8b 87       	std	Y+11, r24	; 0x0b
     f1e:	9c 87       	std	Y+12, r25	; 0x0c
     f20:	ad 87       	std	Y+13, r26	; 0x0d
     f22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f24:	6b 85       	ldd	r22, Y+11	; 0x0b
     f26:	7c 85       	ldd	r23, Y+12	; 0x0c
     f28:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	4a e7       	ldi	r20, 0x7A	; 122
     f32:	53 e4       	ldi	r21, 0x43	; 67
     f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	8f 83       	std	Y+7, r24	; 0x07
     f3e:	98 87       	std	Y+8, r25	; 0x08
     f40:	a9 87       	std	Y+9, r26	; 0x09
     f42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e8       	ldi	r20, 0x80	; 128
     f52:	5f e3       	ldi	r21, 0x3F	; 63
     f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f58:	88 23       	and	r24, r24
     f5a:	2c f4       	brge	.+10     	; 0xf66 <EnterNewPassword+0xc2>
		__ticks = 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	3f c0       	rjmp	.+126    	; 0xfe4 <EnterNewPassword+0x140>
	else if (__tmp > 65535)
     f66:	6f 81       	ldd	r22, Y+7	; 0x07
     f68:	78 85       	ldd	r23, Y+8	; 0x08
     f6a:	89 85       	ldd	r24, Y+9	; 0x09
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	3f ef       	ldi	r19, 0xFF	; 255
     f72:	4f e7       	ldi	r20, 0x7F	; 127
     f74:	57 e4       	ldi	r21, 0x47	; 71
     f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f7a:	18 16       	cp	r1, r24
     f7c:	4c f5       	brge	.+82     	; 0xfd0 <EnterNewPassword+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f80:	7c 85       	ldd	r23, Y+12	; 0x0c
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e2       	ldi	r20, 0x20	; 32
     f8c:	51 e4       	ldi	r21, 0x41	; 65
     f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9e 83       	std	Y+6, r25	; 0x06
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	0f c0       	rjmp	.+30     	; 0xfc6 <EnterNewPassword+0x122>
     fa8:	89 e1       	ldi	r24, 0x19	; 25
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 83       	std	Y+4, r25	; 0x04
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <EnterNewPassword+0x110>
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	9e 81       	ldd	r25, Y+6	; 0x06
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	69 f7       	brne	.-38     	; 0xfa8 <EnterNewPassword+0x104>
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <EnterNewPassword+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd0:	6f 81       	ldd	r22, Y+7	; 0x07
     fd2:	78 85       	ldd	r23, Y+8	; 0x08
     fd4:	89 85       	ldd	r24, Y+9	; 0x09
     fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <EnterNewPassword+0x14c>
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Enter New PW :");
	LCD_goToRowColumn(1,0);
	/*
	 * get number of characters from user equal to PASSWORD_SIZE
	 */
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
     ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
     ffc:	8f 87       	std	Y+15, r24	; 0x0f
     ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1000:	86 30       	cpi	r24, 0x06	; 6
    1002:	08 f4       	brcc	.+2      	; 0x1006 <EnterNewPassword+0x162>
    1004:	6b cf       	rjmp	.-298    	; 0xedc <EnterNewPassword+0x38>
		LCD_displayCharacter('*'); //display * for each entered character
		UART_sendByte(password[i]); //send entered password to MC2
		_delay_ms(4000);
	}

}
    1006:	65 96       	adiw	r28, 0x15	; 21
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <ReEnterPassword>:
 * 2. Displays '*'
 * 3. Sends entered password to MC2
 */

void ReEnterPassword(void)
{
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	65 97       	sbiw	r28, 0x15	; 21
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
	 */
	uint8 password[PASSWORD_SIZE],i;
	/*
	 * Display "Re-Enter new password"
	 */
	LCD_clearScreen();
    1034:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
	LCD_displayString("Re-enter PW :");
    1038:	87 eb       	ldi	r24, 0xB7	; 183
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
	LCD_goToRowColumn(1,0);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
	/*
	 * get number of characters from user equal to PASSWORD_SIZE
	 */
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
    1048:	1f 86       	std	Y+15, r1	; 0x0f
    104a:	91 c0       	rjmp	.+290    	; 0x116e <ReEnterPassword+0x152>
	{
		password[i] = KeyPad_getPressedKey(); //get input from user number by number
    104c:	8f 85       	ldd	r24, Y+15	; 0x0f
    104e:	08 2f       	mov	r16, r24
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	0e 94 1c 0a 	call	0x1438	; 0x1438 <KeyPad_getPressedKey>
    1056:	28 2f       	mov	r18, r24
    1058:	ce 01       	movw	r24, r28
    105a:	40 96       	adiw	r24, 0x10	; 16
    105c:	fc 01       	movw	r30, r24
    105e:	e0 0f       	add	r30, r16
    1060:	f1 1f       	adc	r31, r17
    1062:	20 83       	st	Z, r18
		LCD_displayCharacter('*'); //display * for each entered character
    1064:	8a e2       	ldi	r24, 0x2A	; 42
    1066:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_displayCharacter>
		UART_sendByte(password[i]); //send entered password to MC2
    106a:	8f 85       	ldd	r24, Y+15	; 0x0f
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	ce 01       	movw	r24, r28
    1072:	40 96       	adiw	r24, 0x10	; 16
    1074:	fc 01       	movw	r30, r24
    1076:	e2 0f       	add	r30, r18
    1078:	f3 1f       	adc	r31, r19
    107a:	80 81       	ld	r24, Z
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <UART_sendByte>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	aa e7       	ldi	r26, 0x7A	; 122
    108a:	b5 e4       	ldi	r27, 0x45	; 69
    108c:	8b 87       	std	Y+11, r24	; 0x0b
    108e:	9c 87       	std	Y+12, r25	; 0x0c
    1090:	ad 87       	std	Y+13, r26	; 0x0d
    1092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1094:	6b 85       	ldd	r22, Y+11	; 0x0b
    1096:	7c 85       	ldd	r23, Y+12	; 0x0c
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a e7       	ldi	r20, 0x7A	; 122
    10a2:	53 e4       	ldi	r21, 0x43	; 67
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	8f 83       	std	Y+7, r24	; 0x07
    10ae:	98 87       	std	Y+8, r25	; 0x08
    10b0:	a9 87       	std	Y+9, r26	; 0x09
    10b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b4:	6f 81       	ldd	r22, Y+7	; 0x07
    10b6:	78 85       	ldd	r23, Y+8	; 0x08
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <ReEnterPassword+0xba>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <ReEnterPassword+0x138>
	else if (__tmp > 65535)
    10d6:	6f 81       	ldd	r22, Y+7	; 0x07
    10d8:	78 85       	ldd	r23, Y+8	; 0x08
    10da:	89 85       	ldd	r24, Y+9	; 0x09
    10dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	3f ef       	ldi	r19, 0xFF	; 255
    10e2:	4f e7       	ldi	r20, 0x7F	; 127
    10e4:	57 e4       	ldi	r21, 0x47	; 71
    10e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	4c f5       	brge	.+82     	; 0x1140 <ReEnterPassword+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e2       	ldi	r20, 0x20	; 32
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <ReEnterPassword+0x11a>
    1118:	89 e1       	ldi	r24, 0x19	; 25
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <ReEnterPassword+0x108>
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	69 f7       	brne	.-38     	; 0x1118 <ReEnterPassword+0xfc>
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <ReEnterPassword+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1140:	6f 81       	ldd	r22, Y+7	; 0x07
    1142:	78 85       	ldd	r23, Y+8	; 0x08
    1144:	89 85       	ldd	r24, Y+9	; 0x09
    1146:	9a 85       	ldd	r25, Y+10	; 0x0a
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <ReEnterPassword+0x144>
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Re-enter PW :");
	LCD_goToRowColumn(1,0);
	/*
	 * get number of characters from user equal to PASSWORD_SIZE
	 */
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
    1168:	8f 85       	ldd	r24, Y+15	; 0x0f
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	8f 87       	std	Y+15, r24	; 0x0f
    116e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1170:	86 30       	cpi	r24, 0x06	; 6
    1172:	08 f4       	brcc	.+2      	; 0x1176 <ReEnterPassword+0x15a>
    1174:	6b cf       	rjmp	.-298    	; 0x104c <ReEnterPassword+0x30>
		password[i] = KeyPad_getPressedKey(); //get input from user number by number
		LCD_displayCharacter('*'); //display * for each entered character
		UART_sendByte(password[i]); //send entered password to MC2
		_delay_ms(4000);
	}
}
    1176:	65 96       	adiw	r28, 0x15	; 21
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <EnterYourPassword>:
 * 3. Sends entered password to MC2
 */


void EnterYourPassword(void)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	2f 97       	sbiw	r28, 0x0f	; 15
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
	 */
	uint8 i;
	/*
	 * Display "Enter your password"
	 */
	LCD_clearScreen();
    11a0:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
	LCD_goToRowColumn(0,0);
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
	LCD_displayString("Enter Your PW :");
    11ac:	85 ec       	ldi	r24, 0xC5	; 197
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
	LCD_goToRowColumn(1,0);
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
	/*
	 * get number of characters from user equal to PASSWORD_SIZE
	 */
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
    11bc:	1f 86       	std	Y+15, r1	; 0x0f
    11be:	7e c0       	rjmp	.+252    	; 0x12bc <EnterYourPassword+0x130>
	{
		UART_sendByte(KeyPad_getPressedKey()); //send entered password to MC2
    11c0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <KeyPad_getPressedKey>
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <UART_sendByte>
		LCD_displayCharacter('*'); //display * for each entered character
    11cc:	8a e2       	ldi	r24, 0x2A	; 42
    11ce:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_displayCharacter>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	aa e7       	ldi	r26, 0x7A	; 122
    11d8:	b5 e4       	ldi	r27, 0x45	; 69
    11da:	8b 87       	std	Y+11, r24	; 0x0b
    11dc:	9c 87       	std	Y+12, r25	; 0x0c
    11de:	ad 87       	std	Y+13, r26	; 0x0d
    11e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	4a e7       	ldi	r20, 0x7A	; 122
    11f0:	53 e4       	ldi	r21, 0x43	; 67
    11f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	8f 83       	std	Y+7, r24	; 0x07
    11fc:	98 87       	std	Y+8, r25	; 0x08
    11fe:	a9 87       	std	Y+9, r26	; 0x09
    1200:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1202:	6f 81       	ldd	r22, Y+7	; 0x07
    1204:	78 85       	ldd	r23, Y+8	; 0x08
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	9a 85       	ldd	r25, Y+10	; 0x0a
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e8       	ldi	r20, 0x80	; 128
    1210:	5f e3       	ldi	r21, 0x3F	; 63
    1212:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1216:	88 23       	and	r24, r24
    1218:	2c f4       	brge	.+10     	; 0x1224 <EnterYourPassword+0x98>
		__ticks = 1;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	3f c0       	rjmp	.+126    	; 0x12a2 <EnterYourPassword+0x116>
	else if (__tmp > 65535)
    1224:	6f 81       	ldd	r22, Y+7	; 0x07
    1226:	78 85       	ldd	r23, Y+8	; 0x08
    1228:	89 85       	ldd	r24, Y+9	; 0x09
    122a:	9a 85       	ldd	r25, Y+10	; 0x0a
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	3f ef       	ldi	r19, 0xFF	; 255
    1230:	4f e7       	ldi	r20, 0x7F	; 127
    1232:	57 e4       	ldi	r21, 0x47	; 71
    1234:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1238:	18 16       	cp	r1, r24
    123a:	4c f5       	brge	.+82     	; 0x128e <EnterYourPassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123c:	6b 85       	ldd	r22, Y+11	; 0x0b
    123e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1240:	8d 85       	ldd	r24, Y+13	; 0x0d
    1242:	9e 85       	ldd	r25, Y+14	; 0x0e
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e2       	ldi	r20, 0x20	; 32
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	bc 01       	movw	r22, r24
    1256:	cd 01       	movw	r24, r26
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9e 83       	std	Y+6, r25	; 0x06
    1262:	8d 83       	std	Y+5, r24	; 0x05
    1264:	0f c0       	rjmp	.+30     	; 0x1284 <EnterYourPassword+0xf8>
    1266:	89 e1       	ldi	r24, 0x19	; 25
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c 83       	std	Y+4, r25	; 0x04
    126c:	8b 83       	std	Y+3, r24	; 0x03
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <EnterYourPassword+0xe6>
    1276:	9c 83       	std	Y+4, r25	; 0x04
    1278:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	9e 83       	std	Y+6, r25	; 0x06
    1282:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	69 f7       	brne	.-38     	; 0x1266 <EnterYourPassword+0xda>
    128c:	14 c0       	rjmp	.+40     	; 0x12b6 <EnterYourPassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128e:	6f 81       	ldd	r22, Y+7	; 0x07
    1290:	78 85       	ldd	r23, Y+8	; 0x08
    1292:	89 85       	ldd	r24, Y+9	; 0x09
    1294:	9a 85       	ldd	r25, Y+10	; 0x0a
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9e 83       	std	Y+6, r25	; 0x06
    12a0:	8d 83       	std	Y+5, r24	; 0x05
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <EnterYourPassword+0x122>
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Enter Your PW :");
	LCD_goToRowColumn(1,0);
	/*
	 * get number of characters from user equal to PASSWORD_SIZE
	 */
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
    12b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	8f 87       	std	Y+15, r24	; 0x0f
    12bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12be:	86 30       	cpi	r24, 0x06	; 6
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <EnterYourPassword+0x138>
    12c2:	7e cf       	rjmp	.-260    	; 0x11c0 <EnterYourPassword+0x34>
	{
		UART_sendByte(KeyPad_getPressedKey()); //send entered password to MC2
		LCD_displayCharacter('*'); //display * for each entered character
		_delay_ms(4000);
	}
}
    12c4:	2f 96       	adiw	r28, 0x0f	; 15
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <EnterOldPassword>:
 * 3. Sends entered password to MC2
 */


void EnterOldPassword(void)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	2f 97       	sbiw	r28, 0x0f	; 15
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
	 */
	uint8 i;
	/*
	 * Display "Enter OLD password"
	 */
	LCD_clearScreen();
    12ea:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_clearScreen>
	LCD_goToRowColumn(0,0);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
	LCD_displayString("Enter Old PW :");
    12f6:	85 ed       	ldi	r24, 0xD5	; 213
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
	LCD_goToRowColumn(1,0);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
	/*
	 * get number of characters from user equal to PASSWORD_SIZE
	 */
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
    1306:	1f 86       	std	Y+15, r1	; 0x0f
    1308:	7e c0       	rjmp	.+252    	; 0x1406 <EnterOldPassword+0x130>
	{
		UART_sendByte(KeyPad_getPressedKey()); //send entered password to MC2
    130a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <KeyPad_getPressedKey>
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <UART_sendByte>
		LCD_displayCharacter('*'); //display * for each entered character
    1316:	8a e2       	ldi	r24, 0x2A	; 42
    1318:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_displayCharacter>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	aa e7       	ldi	r26, 0x7A	; 122
    1322:	b5 e4       	ldi	r27, 0x45	; 69
    1324:	8b 87       	std	Y+11, r24	; 0x0b
    1326:	9c 87       	std	Y+12, r25	; 0x0c
    1328:	ad 87       	std	Y+13, r26	; 0x0d
    132a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132c:	6b 85       	ldd	r22, Y+11	; 0x0b
    132e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1330:	8d 85       	ldd	r24, Y+13	; 0x0d
    1332:	9e 85       	ldd	r25, Y+14	; 0x0e
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a e7       	ldi	r20, 0x7A	; 122
    133a:	53 e4       	ldi	r21, 0x43	; 67
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	8f 83       	std	Y+7, r24	; 0x07
    1346:	98 87       	std	Y+8, r25	; 0x08
    1348:	a9 87       	std	Y+9, r26	; 0x09
    134a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    134c:	6f 81       	ldd	r22, Y+7	; 0x07
    134e:	78 85       	ldd	r23, Y+8	; 0x08
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1360:	88 23       	and	r24, r24
    1362:	2c f4       	brge	.+10     	; 0x136e <EnterOldPassword+0x98>
		__ticks = 1;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
    136c:	3f c0       	rjmp	.+126    	; 0x13ec <EnterOldPassword+0x116>
	else if (__tmp > 65535)
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3f ef       	ldi	r19, 0xFF	; 255
    137a:	4f e7       	ldi	r20, 0x7F	; 127
    137c:	57 e4       	ldi	r21, 0x47	; 71
    137e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1382:	18 16       	cp	r1, r24
    1384:	4c f5       	brge	.+82     	; 0x13d8 <EnterOldPassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e2       	ldi	r20, 0x20	; 32
    1394:	51 e4       	ldi	r21, 0x41	; 65
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	0f c0       	rjmp	.+30     	; 0x13ce <EnterOldPassword+0xf8>
    13b0:	89 e1       	ldi	r24, 0x19	; 25
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9c 83       	std	Y+4, r25	; 0x04
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <EnterOldPassword+0xe6>
    13c0:	9c 83       	std	Y+4, r25	; 0x04
    13c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	69 f7       	brne	.-38     	; 0x13b0 <EnterOldPassword+0xda>
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <EnterOldPassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	9e 83       	std	Y+6, r25	; 0x06
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <EnterOldPassword+0x122>
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Enter Old PW :");
	LCD_goToRowColumn(1,0);
	/*
	 * get number of characters from user equal to PASSWORD_SIZE
	 */
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
    1400:	8f 85       	ldd	r24, Y+15	; 0x0f
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	8f 87       	std	Y+15, r24	; 0x0f
    1406:	8f 85       	ldd	r24, Y+15	; 0x0f
    1408:	86 30       	cpi	r24, 0x06	; 6
    140a:	08 f4       	brcc	.+2      	; 0x140e <EnterOldPassword+0x138>
    140c:	7e cf       	rjmp	.-260    	; 0x130a <EnterOldPassword+0x34>
	{
		UART_sendByte(KeyPad_getPressedKey()); //send entered password to MC2
		LCD_displayCharacter('*'); //display * for each entered character
		_delay_ms(4000);
	}
}
    140e:	2f 96       	adiw	r28, 0x0f	; 15
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <setDisplayMessage>:
 * 2. Updates current state and display different message on LCD
 */


void setDisplayMessage(void)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	/*
	 * MC1 state equals that received from MC2 through UART
	 * so here it gets the value of the data register of UART
	 */
	g_displayMessage = UDR;
    1428:	ec e2       	ldi	r30, 0x2C	; 44
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	80 93 f0 00 	sts	0x00F0, r24
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <KeyPad_getPressedKey+0x6>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1442:	1a 82       	std	Y+2, r1	; 0x02
    1444:	4c c0       	rjmp	.+152    	; 0x14de <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1446:	ea e3       	ldi	r30, 0x3A	; 58
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	80 e1       	ldi	r24, 0x10	; 16
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <KeyPad_getPressedKey+0x22>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	2a 95       	dec	r18
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <KeyPad_getPressedKey+0x1e>
    145e:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1460:	eb e3       	ldi	r30, 0x3B	; 59
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	80 e1       	ldi	r24, 0x10	; 16
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <KeyPad_getPressedKey+0x3e>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <KeyPad_getPressedKey+0x3a>
    147a:	80 95       	com	r24
    147c:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    147e:	19 82       	std	Y+1, r1	; 0x01
    1480:	28 c0       	rjmp	.+80     	; 0x14d2 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1482:	e9 e3       	ldi	r30, 0x39	; 57
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a9 01       	movw	r20, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <KeyPad_getPressedKey+0x62>
    1496:	55 95       	asr	r21
    1498:	47 95       	ror	r20
    149a:	8a 95       	dec	r24
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <KeyPad_getPressedKey+0x5e>
    149e:	ca 01       	movw	r24, r20
    14a0:	81 70       	andi	r24, 0x01	; 1
    14a2:	90 70       	andi	r25, 0x00	; 0
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	91 f4       	brne	.+36     	; 0x14cc <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	98 2f       	mov	r25, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	89 0f       	add	r24, r25
    14bc:	8f 5f       	subi	r24, 0xFF	; 255
    14be:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	84 30       	cpi	r24, 0x04	; 4
    14d6:	a8 f2       	brcs	.-86     	; 0x1482 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <KeyPad_getPressedKey+0xae>
    14e4:	b0 cf       	rjmp	.-160    	; 0x1446 <KeyPad_getPressedKey+0xe>
    14e6:	ad cf       	rjmp	.-166    	; 0x1442 <KeyPad_getPressedKey+0xa>

000014e8 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <KeyPad_4x4_adjustKeyNumber+0x6>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <KeyPad_4x4_adjustKeyNumber+0x8>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3c 83       	std	Y+4, r19	; 0x04
    14fe:	2b 83       	std	Y+3, r18	; 0x03
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	88 30       	cpi	r24, 0x08	; 8
    1506:	91 05       	cpc	r25, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <KeyPad_4x4_adjustKeyNumber+0x24>
    150a:	70 c0       	rjmp	.+224    	; 0x15ec <KeyPad_4x4_adjustKeyNumber+0x104>
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	29 30       	cpi	r18, 0x09	; 9
    1512:	31 05       	cpc	r19, r1
    1514:	5c f5       	brge	.+86     	; 0x156c <KeyPad_4x4_adjustKeyNumber+0x84>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	91 05       	cpc	r25, r1
    151e:	09 f4       	brne	.+2      	; 0x1522 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1520:	59 c0       	rjmp	.+178    	; 0x15d4 <KeyPad_4x4_adjustKeyNumber+0xec>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	25 30       	cpi	r18, 0x05	; 5
    1528:	31 05       	cpc	r19, r1
    152a:	9c f4       	brge	.+38     	; 0x1552 <KeyPad_4x4_adjustKeyNumber+0x6a>
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	91 05       	cpc	r25, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <KeyPad_4x4_adjustKeyNumber+0x50>
    1536:	48 c0       	rjmp	.+144    	; 0x15c8 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	23 30       	cpi	r18, 0x03	; 3
    153e:	31 05       	cpc	r19, r1
    1540:	0c f0       	brlt	.+2      	; 0x1544 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1542:	45 c0       	rjmp	.+138    	; 0x15ce <KeyPad_4x4_adjustKeyNumber+0xe6>
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <KeyPad_4x4_adjustKeyNumber+0x68>
    154e:	39 c0       	rjmp	.+114    	; 0x15c2 <KeyPad_4x4_adjustKeyNumber+0xda>
    1550:	67 c0       	rjmp	.+206    	; 0x1620 <KeyPad_4x4_adjustKeyNumber+0x138>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	26 30       	cpi	r18, 0x06	; 6
    1558:	31 05       	cpc	r19, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <KeyPad_4x4_adjustKeyNumber+0x76>
    155c:	41 c0       	rjmp	.+130    	; 0x15e0 <KeyPad_4x4_adjustKeyNumber+0xf8>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	87 30       	cpi	r24, 0x07	; 7
    1564:	91 05       	cpc	r25, r1
    1566:	0c f0       	brlt	.+2      	; 0x156a <KeyPad_4x4_adjustKeyNumber+0x82>
    1568:	3e c0       	rjmp	.+124    	; 0x15e6 <KeyPad_4x4_adjustKeyNumber+0xfe>
    156a:	37 c0       	rjmp	.+110    	; 0x15da <KeyPad_4x4_adjustKeyNumber+0xf2>
    156c:	2b 81       	ldd	r18, Y+3	; 0x03
    156e:	3c 81       	ldd	r19, Y+4	; 0x04
    1570:	2c 30       	cpi	r18, 0x0C	; 12
    1572:	31 05       	cpc	r19, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <KeyPad_4x4_adjustKeyNumber+0x90>
    1576:	46 c0       	rjmp	.+140    	; 0x1604 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	8d 30       	cpi	r24, 0x0D	; 13
    157e:	91 05       	cpc	r25, r1
    1580:	5c f4       	brge	.+22     	; 0x1598 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	2a 30       	cpi	r18, 0x0A	; 10
    1588:	31 05       	cpc	r19, r1
    158a:	b1 f1       	breq	.+108    	; 0x15f8 <KeyPad_4x4_adjustKeyNumber+0x110>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	8b 30       	cpi	r24, 0x0B	; 11
    1592:	91 05       	cpc	r25, r1
    1594:	a4 f5       	brge	.+104    	; 0x15fe <KeyPad_4x4_adjustKeyNumber+0x116>
    1596:	2d c0       	rjmp	.+90     	; 0x15f2 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	2e 30       	cpi	r18, 0x0E	; 14
    159e:	31 05       	cpc	r19, r1
    15a0:	b9 f1       	breq	.+110    	; 0x1610 <KeyPad_4x4_adjustKeyNumber+0x128>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	8e 30       	cpi	r24, 0x0E	; 14
    15a8:	91 05       	cpc	r25, r1
    15aa:	7c f1       	brlt	.+94     	; 0x160a <KeyPad_4x4_adjustKeyNumber+0x122>
    15ac:	2b 81       	ldd	r18, Y+3	; 0x03
    15ae:	3c 81       	ldd	r19, Y+4	; 0x04
    15b0:	2f 30       	cpi	r18, 0x0F	; 15
    15b2:	31 05       	cpc	r19, r1
    15b4:	79 f1       	breq	.+94     	; 0x1614 <KeyPad_4x4_adjustKeyNumber+0x12c>
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	80 31       	cpi	r24, 0x10	; 16
    15bc:	91 05       	cpc	r25, r1
    15be:	69 f1       	breq	.+90     	; 0x161a <KeyPad_4x4_adjustKeyNumber+0x132>
    15c0:	2f c0       	rjmp	.+94     	; 0x1620 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    15c2:	97 e0       	ldi	r25, 0x07	; 7
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	2e c0       	rjmp	.+92     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    15c8:	28 e0       	ldi	r18, 0x08	; 8
    15ca:	2a 83       	std	Y+2, r18	; 0x02
    15cc:	2b c0       	rjmp	.+86     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    15ce:	39 e0       	ldi	r19, 0x09	; 9
    15d0:	3a 83       	std	Y+2, r19	; 0x02
    15d2:	28 c0       	rjmp	.+80     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    15d4:	85 e2       	ldi	r24, 0x25	; 37
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	25 c0       	rjmp	.+74     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    15da:	94 e0       	ldi	r25, 0x04	; 4
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	22 c0       	rjmp	.+68     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    15e0:	25 e0       	ldi	r18, 0x05	; 5
    15e2:	2a 83       	std	Y+2, r18	; 0x02
    15e4:	1f c0       	rjmp	.+62     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    15e6:	36 e0       	ldi	r19, 0x06	; 6
    15e8:	3a 83       	std	Y+2, r19	; 0x02
    15ea:	1c c0       	rjmp	.+56     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    15ec:	8a e2       	ldi	r24, 0x2A	; 42
    15ee:	8a 83       	std	Y+2, r24	; 0x02
    15f0:	19 c0       	rjmp	.+50     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	16 c0       	rjmp	.+44     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    15f8:	22 e0       	ldi	r18, 0x02	; 2
    15fa:	2a 83       	std	Y+2, r18	; 0x02
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    15fe:	33 e0       	ldi	r19, 0x03	; 3
    1600:	3a 83       	std	Y+2, r19	; 0x02
    1602:	10 c0       	rjmp	.+32     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1604:	8d e2       	ldi	r24, 0x2D	; 45
    1606:	8a 83       	std	Y+2, r24	; 0x02
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    160a:	9d e0       	ldi	r25, 0x0D	; 13
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1610:	1a 82       	std	Y+2, r1	; 0x02
    1612:	08 c0       	rjmp	.+16     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1614:	2d e3       	ldi	r18, 0x3D	; 61
    1616:	2a 83       	std	Y+2, r18	; 0x02
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    161a:	3b e2       	ldi	r19, 0x2B	; 43
    161c:	3a 83       	std	Y+2, r19	; 0x02
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	8a 83       	std	Y+2, r24	; 0x02
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    163c:	a1 e3       	ldi	r26, 0x31	; 49
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e1 e3       	ldi	r30, 0x31	; 49
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 67       	ori	r24, 0x70	; 112
    1648:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    164a:	a4 e3       	ldi	r26, 0x34	; 52
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e4 e3       	ldi	r30, 0x34	; 52
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	80 6f       	ori	r24, 0xF0	; 240
    1656:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    165e:	88 e2       	ldi	r24, 0x28	; 40
    1660:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1664:	8c e0       	ldi	r24, 0x0C	; 12
    1666:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
}
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	c3 56       	subi	r28, 0x63	; 99
    1684:	d0 40       	sbci	r29, 0x00	; 0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	fe 01       	movw	r30, r28
    1692:	ed 59       	subi	r30, 0x9D	; 157
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1698:	a2 e3       	ldi	r26, 0x32	; 50
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e2 e3       	ldi	r30, 0x32	; 50
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 7e       	andi	r24, 0xEF	; 239
    16a4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    16a6:	a2 e3       	ldi	r26, 0x32	; 50
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e2 e3       	ldi	r30, 0x32	; 50
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8f 7d       	andi	r24, 0xDF	; 223
    16b2:	8c 93       	st	X, r24
    16b4:	fe 01       	movw	r30, r28
    16b6:	e1 5a       	subi	r30, 0xA1	; 161
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 e8       	ldi	r26, 0x80	; 128
    16c0:	bf e3       	ldi	r27, 0x3F	; 63
    16c2:	80 83       	st	Z, r24
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	a2 83       	std	Z+2, r26	; 0x02
    16c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	8e 01       	movw	r16, r28
    16cc:	05 5a       	subi	r16, 0xA5	; 165
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	fe 01       	movw	r30, r28
    16d2:	e1 5a       	subi	r30, 0xA1	; 161
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	4a e7       	ldi	r20, 0x7A	; 122
    16e4:	53 e4       	ldi	r21, 0x43	; 67
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	f8 01       	movw	r30, r16
    16f0:	80 83       	st	Z, r24
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	a2 83       	std	Z+2, r26	; 0x02
    16f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16f8:	fe 01       	movw	r30, r28
    16fa:	e5 5a       	subi	r30, 0xA5	; 165
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	60 81       	ld	r22, Z
    1700:	71 81       	ldd	r23, Z+1	; 0x01
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e8       	ldi	r20, 0x80	; 128
    170c:	5f e3       	ldi	r21, 0x3F	; 63
    170e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1712:	88 23       	and	r24, r24
    1714:	44 f4       	brge	.+16     	; 0x1726 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1716:	fe 01       	movw	r30, r28
    1718:	e7 5a       	subi	r30, 0xA7	; 167
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	64 c0       	rjmp	.+200    	; 0x17ee <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1726:	fe 01       	movw	r30, r28
    1728:	e5 5a       	subi	r30, 0xA5	; 165
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	0c f0       	brlt	.+2      	; 0x1746 <LCD_sendCommand+0xd0>
    1744:	43 c0       	rjmp	.+134    	; 0x17cc <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1746:	fe 01       	movw	r30, r28
    1748:	e1 5a       	subi	r30, 0xA1	; 161
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	60 81       	ld	r22, Z
    174e:	71 81       	ldd	r23, Z+1	; 0x01
    1750:	82 81       	ldd	r24, Z+2	; 0x02
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8e 01       	movw	r16, r28
    1766:	07 5a       	subi	r16, 0xA7	; 167
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	f8 01       	movw	r30, r16
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
    177c:	1f c0       	rjmp	.+62     	; 0x17bc <LCD_sendCommand+0x146>
    177e:	fe 01       	movw	r30, r28
    1780:	e9 5a       	subi	r30, 0xA9	; 169
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	89 e1       	ldi	r24, 0x19	; 25
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
    178c:	fe 01       	movw	r30, r28
    178e:	e9 5a       	subi	r30, 0xA9	; 169
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	91 81       	ldd	r25, Z+1	; 0x01
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCD_sendCommand+0x120>
    179a:	fe 01       	movw	r30, r28
    179c:	e9 5a       	subi	r30, 0xA9	; 169
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	de 01       	movw	r26, r28
    17a6:	a7 5a       	subi	r26, 0xA7	; 167
    17a8:	bf 4f       	sbci	r27, 0xFF	; 255
    17aa:	fe 01       	movw	r30, r28
    17ac:	e7 5a       	subi	r30, 0xA7	; 167
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	11 96       	adiw	r26, 0x01	; 1
    17b8:	9c 93       	st	X, r25
    17ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17bc:	fe 01       	movw	r30, r28
    17be:	e7 5a       	subi	r30, 0xA7	; 167
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	d1 f6       	brne	.-76     	; 0x177e <LCD_sendCommand+0x108>
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17cc:	8e 01       	movw	r16, r28
    17ce:	07 5a       	subi	r16, 0xA7	; 167
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	fe 01       	movw	r30, r28
    17d4:	e5 5a       	subi	r30, 0xA5	; 165
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	f8 01       	movw	r30, r16
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	80 83       	st	Z, r24
    17ee:	de 01       	movw	r26, r28
    17f0:	ab 5a       	subi	r26, 0xAB	; 171
    17f2:	bf 4f       	sbci	r27, 0xFF	; 255
    17f4:	fe 01       	movw	r30, r28
    17f6:	e7 5a       	subi	r30, 0xA7	; 167
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	8d 93       	st	X+, r24
    1800:	9c 93       	st	X, r25
    1802:	fe 01       	movw	r30, r28
    1804:	eb 5a       	subi	r30, 0xAB	; 171
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_sendCommand+0x196>
    1810:	fe 01       	movw	r30, r28
    1812:	eb 5a       	subi	r30, 0xAB	; 171
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    181a:	a2 e3       	ldi	r26, 0x32	; 50
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e2 e3       	ldi	r30, 0x32	; 50
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	80 64       	ori	r24, 0x40	; 64
    1826:	8c 93       	st	X, r24
    1828:	fe 01       	movw	r30, r28
    182a:	ef 5a       	subi	r30, 0xAF	; 175
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e8       	ldi	r26, 0x80	; 128
    1834:	bf e3       	ldi	r27, 0x3F	; 63
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183e:	8e 01       	movw	r16, r28
    1840:	03 5b       	subi	r16, 0xB3	; 179
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	fe 01       	movw	r30, r28
    1846:	ef 5a       	subi	r30, 0xAF	; 175
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4a e7       	ldi	r20, 0x7A	; 122
    1858:	53 e4       	ldi	r21, 0x43	; 67
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	f8 01       	movw	r30, r16
    1864:	80 83       	st	Z, r24
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	a2 83       	std	Z+2, r26	; 0x02
    186a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    186c:	fe 01       	movw	r30, r28
    186e:	e3 5b       	subi	r30, 0xB3	; 179
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e8       	ldi	r20, 0x80	; 128
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1886:	88 23       	and	r24, r24
    1888:	44 f4       	brge	.+16     	; 0x189a <LCD_sendCommand+0x224>
		__ticks = 1;
    188a:	fe 01       	movw	r30, r28
    188c:	e5 5b       	subi	r30, 0xB5	; 181
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
    1898:	64 c0       	rjmp	.+200    	; 0x1962 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    189a:	fe 01       	movw	r30, r28
    189c:	e3 5b       	subi	r30, 0xB3	; 179
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
    18ac:	4f e7       	ldi	r20, 0x7F	; 127
    18ae:	57 e4       	ldi	r21, 0x47	; 71
    18b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b4:	18 16       	cp	r1, r24
    18b6:	0c f0       	brlt	.+2      	; 0x18ba <LCD_sendCommand+0x244>
    18b8:	43 c0       	rjmp	.+134    	; 0x1940 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	fe 01       	movw	r30, r28
    18bc:	ef 5a       	subi	r30, 0xAF	; 175
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e2       	ldi	r20, 0x20	; 32
    18ce:	51 e4       	ldi	r21, 0x41	; 65
    18d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	8e 01       	movw	r16, r28
    18da:	05 5b       	subi	r16, 0xB5	; 181
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	f8 01       	movw	r30, r16
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
    18f0:	1f c0       	rjmp	.+62     	; 0x1930 <LCD_sendCommand+0x2ba>
    18f2:	fe 01       	movw	r30, r28
    18f4:	e7 5b       	subi	r30, 0xB7	; 183
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	89 e1       	ldi	r24, 0x19	; 25
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24
    1900:	fe 01       	movw	r30, r28
    1902:	e7 5b       	subi	r30, 0xB7	; 183
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_sendCommand+0x294>
    190e:	fe 01       	movw	r30, r28
    1910:	e7 5b       	subi	r30, 0xB7	; 183
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	de 01       	movw	r26, r28
    191a:	a5 5b       	subi	r26, 0xB5	; 181
    191c:	bf 4f       	sbci	r27, 0xFF	; 255
    191e:	fe 01       	movw	r30, r28
    1920:	e5 5b       	subi	r30, 0xB5	; 181
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	91 81       	ldd	r25, Z+1	; 0x01
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	11 96       	adiw	r26, 0x01	; 1
    192c:	9c 93       	st	X, r25
    192e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	fe 01       	movw	r30, r28
    1932:	e5 5b       	subi	r30, 0xB5	; 181
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	d1 f6       	brne	.-76     	; 0x18f2 <LCD_sendCommand+0x27c>
    193e:	27 c0       	rjmp	.+78     	; 0x198e <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1940:	8e 01       	movw	r16, r28
    1942:	05 5b       	subi	r16, 0xB5	; 181
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	fe 01       	movw	r30, r28
    1948:	e3 5b       	subi	r30, 0xB3	; 179
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	f8 01       	movw	r30, r16
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	80 83       	st	Z, r24
    1962:	de 01       	movw	r26, r28
    1964:	a9 5b       	subi	r26, 0xB9	; 185
    1966:	bf 4f       	sbci	r27, 0xFF	; 255
    1968:	fe 01       	movw	r30, r28
    196a:	e5 5b       	subi	r30, 0xB5	; 181
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	8d 93       	st	X+, r24
    1974:	9c 93       	st	X, r25
    1976:	fe 01       	movw	r30, r28
    1978:	e9 5b       	subi	r30, 0xB9	; 185
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_sendCommand+0x30a>
    1984:	fe 01       	movw	r30, r28
    1986:	e9 5b       	subi	r30, 0xB9	; 185
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    198e:	a5 e3       	ldi	r26, 0x35	; 53
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e5 e3       	ldi	r30, 0x35	; 53
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	98 2f       	mov	r25, r24
    199a:	9f 70       	andi	r25, 0x0F	; 15
    199c:	fe 01       	movw	r30, r28
    199e:	ed 59       	subi	r30, 0x9D	; 157
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	80 81       	ld	r24, Z
    19a4:	80 7f       	andi	r24, 0xF0	; 240
    19a6:	89 2b       	or	r24, r25
    19a8:	8c 93       	st	X, r24
    19aa:	fe 01       	movw	r30, r28
    19ac:	ed 5b       	subi	r30, 0xBD	; 189
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	80 83       	st	Z, r24
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	8e 01       	movw	r16, r28
    19c2:	01 5c       	subi	r16, 0xC1	; 193
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	ed 5b       	subi	r30, 0xBD	; 189
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a e7       	ldi	r20, 0x7A	; 122
    19da:	53 e4       	ldi	r21, 0x43	; 67
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ee:	fe 01       	movw	r30, r28
    19f0:	ff 96       	adiw	r30, 0x3f	; 63
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9e af       	std	Y+62, r25	; 0x3e
    1a10:	8d af       	std	Y+61, r24	; 0x3d
    1a12:	46 c0       	rjmp	.+140    	; 0x1aa0 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1a14:	fe 01       	movw	r30, r28
    1a16:	ff 96       	adiw	r30, 0x3f	; 63
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	64 f5       	brge	.+88     	; 0x1a88 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	fe 01       	movw	r30, r28
    1a32:	ed 5b       	subi	r30, 0xBD	; 189
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e2       	ldi	r20, 0x20	; 32
    1a44:	51 e4       	ldi	r21, 0x41	; 65
    1a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	9e af       	std	Y+62, r25	; 0x3e
    1a5c:	8d af       	std	Y+61, r24	; 0x3d
    1a5e:	0f c0       	rjmp	.+30     	; 0x1a7e <LCD_sendCommand+0x408>
    1a60:	89 e1       	ldi	r24, 0x19	; 25
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9c af       	std	Y+60, r25	; 0x3c
    1a66:	8b af       	std	Y+59, r24	; 0x3b
    1a68:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <LCD_sendCommand+0x3f6>
    1a70:	9c af       	std	Y+60, r25	; 0x3c
    1a72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	9e af       	std	Y+62, r25	; 0x3e
    1a7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f7       	brne	.-38     	; 0x1a60 <LCD_sendCommand+0x3ea>
    1a86:	16 c0       	rjmp	.+44     	; 0x1ab4 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ff 96       	adiw	r30, 0x3f	; 63
    1a8c:	60 81       	ld	r22, Z
    1a8e:	71 81       	ldd	r23, Z+1	; 0x01
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	93 81       	ldd	r25, Z+3	; 0x03
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e af       	std	Y+62, r25	; 0x3e
    1a9e:	8d af       	std	Y+61, r24	; 0x3d
    1aa0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa4:	9a af       	std	Y+58, r25	; 0x3a
    1aa6:	89 af       	std	Y+57, r24	; 0x39
    1aa8:	89 ad       	ldd	r24, Y+57	; 0x39
    1aaa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_sendCommand+0x436>
    1ab0:	9a af       	std	Y+58, r25	; 0x3a
    1ab2:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1ab4:	a2 e3       	ldi	r26, 0x32	; 50
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e2 e3       	ldi	r30, 0x32	; 50
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8f 7b       	andi	r24, 0xBF	; 191
    1ac0:	8c 93       	st	X, r24
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e8       	ldi	r26, 0x80	; 128
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	8d ab       	std	Y+53, r24	; 0x35
    1acc:	9e ab       	std	Y+54, r25	; 0x36
    1ace:	af ab       	std	Y+55, r26	; 0x37
    1ad0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad8:	98 ad       	ldd	r25, Y+56	; 0x38
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a e7       	ldi	r20, 0x7A	; 122
    1ae0:	53 e4       	ldi	r21, 0x43	; 67
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	89 ab       	std	Y+49, r24	; 0x31
    1aec:	9a ab       	std	Y+50, r25	; 0x32
    1aee:	ab ab       	std	Y+51, r26	; 0x33
    1af0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1af2:	69 a9       	ldd	r22, Y+49	; 0x31
    1af4:	7a a9       	ldd	r23, Y+50	; 0x32
    1af6:	8b a9       	ldd	r24, Y+51	; 0x33
    1af8:	9c a9       	ldd	r25, Y+52	; 0x34
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <LCD_sendCommand+0x49e>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	98 ab       	std	Y+48, r25	; 0x30
    1b10:	8f a7       	std	Y+47, r24	; 0x2f
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1b14:	69 a9       	ldd	r22, Y+49	; 0x31
    1b16:	7a a9       	ldd	r23, Y+50	; 0x32
    1b18:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b30:	8f a9       	ldd	r24, Y+55	; 0x37
    1b32:	98 ad       	ldd	r25, Y+56	; 0x38
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e2       	ldi	r20, 0x20	; 32
    1b3a:	51 e4       	ldi	r21, 0x41	; 65
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	98 ab       	std	Y+48, r25	; 0x30
    1b52:	8f a7       	std	Y+47, r24	; 0x2f
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <LCD_sendCommand+0x4fe>
    1b56:	89 e1       	ldi	r24, 0x19	; 25
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9e a7       	std	Y+46, r25	; 0x2e
    1b5c:	8d a7       	std	Y+45, r24	; 0x2d
    1b5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b60:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_sendCommand+0x4ec>
    1b66:	9e a7       	std	Y+46, r25	; 0x2e
    1b68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	98 ab       	std	Y+48, r25	; 0x30
    1b72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b76:	98 a9       	ldd	r25, Y+48	; 0x30
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <LCD_sendCommand+0x4e0>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b80:	7a a9       	ldd	r23, Y+50	; 0x32
    1b82:	8b a9       	ldd	r24, Y+51	; 0x33
    1b84:	9c a9       	ldd	r25, Y+52	; 0x34
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	98 ab       	std	Y+48, r25	; 0x30
    1b90:	8f a7       	std	Y+47, r24	; 0x2f
    1b92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b94:	98 a9       	ldd	r25, Y+48	; 0x30
    1b96:	9c a7       	std	Y+44, r25	; 0x2c
    1b98:	8b a7       	std	Y+43, r24	; 0x2b
    1b9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_sendCommand+0x528>
    1ba2:	9c a7       	std	Y+44, r25	; 0x2c
    1ba4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1ba6:	a2 e3       	ldi	r26, 0x32	; 50
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e2 e3       	ldi	r30, 0x32	; 50
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 64       	ori	r24, 0x40	; 64
    1bb2:	8c 93       	st	X, r24
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e8       	ldi	r26, 0x80	; 128
    1bba:	bf e3       	ldi	r27, 0x3F	; 63
    1bbc:	8f a3       	std	Y+39, r24	; 0x27
    1bbe:	98 a7       	std	Y+40, r25	; 0x28
    1bc0:	a9 a7       	std	Y+41, r26	; 0x29
    1bc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a e7       	ldi	r20, 0x7A	; 122
    1bd2:	53 e4       	ldi	r21, 0x43	; 67
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8b a3       	std	Y+35, r24	; 0x23
    1bde:	9c a3       	std	Y+36, r25	; 0x24
    1be0:	ad a3       	std	Y+37, r26	; 0x25
    1be2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be4:	6b a1       	ldd	r22, Y+35	; 0x23
    1be6:	7c a1       	ldd	r23, Y+36	; 0x24
    1be8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bea:	9e a1       	ldd	r25, Y+38	; 0x26
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <LCD_sendCommand+0x590>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9a a3       	std	Y+34, r25	; 0x22
    1c02:	89 a3       	std	Y+33, r24	; 0x21
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1c06:	6b a1       	ldd	r22, Y+35	; 0x23
    1c08:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c20:	78 a5       	ldd	r23, Y+40	; 0x28
    1c22:	89 a5       	ldd	r24, Y+41	; 0x29
    1c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <LCD_sendCommand+0x5f0>
    1c48:	89 e1       	ldi	r24, 0x19	; 25
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	98 a3       	std	Y+32, r25	; 0x20
    1c4e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c52:	98 a1       	ldd	r25, Y+32	; 0x20
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_sendCommand+0x5de>
    1c58:	98 a3       	std	Y+32, r25	; 0x20
    1c5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9a a3       	std	Y+34, r25	; 0x22
    1c64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	89 a1       	ldd	r24, Y+33	; 0x21
    1c68:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <LCD_sendCommand+0x5d2>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6b a1       	ldd	r22, Y+35	; 0x23
    1c72:	7c a1       	ldd	r23, Y+36	; 0x24
    1c74:	8d a1       	ldd	r24, Y+37	; 0x25
    1c76:	9e a1       	ldd	r25, Y+38	; 0x26
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9a a3       	std	Y+34, r25	; 0x22
    1c82:	89 a3       	std	Y+33, r24	; 0x21
    1c84:	89 a1       	ldd	r24, Y+33	; 0x21
    1c86:	9a a1       	ldd	r25, Y+34	; 0x22
    1c88:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_sendCommand+0x61a>
    1c94:	9e 8f       	std	Y+30, r25	; 0x1e
    1c96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1c98:	a5 e3       	ldi	r26, 0x35	; 53
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e5 e3       	ldi	r30, 0x35	; 53
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	2f 70       	andi	r18, 0x0F	; 15
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ed 59       	subi	r30, 0x9D	; 157
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	82 95       	swap	r24
    1cb4:	92 95       	swap	r25
    1cb6:	90 7f       	andi	r25, 0xF0	; 240
    1cb8:	98 27       	eor	r25, r24
    1cba:	80 7f       	andi	r24, 0xF0	; 240
    1cbc:	98 27       	eor	r25, r24
    1cbe:	82 2b       	or	r24, r18
    1cc0:	8c 93       	st	X, r24
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	89 8f       	std	Y+25, r24	; 0x19
    1ccc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cce:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	53 e4       	ldi	r21, 0x43	; 67
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8d 8b       	std	Y+21, r24	; 0x15
    1cec:	9e 8b       	std	Y+22, r25	; 0x16
    1cee:	af 8b       	std	Y+23, r26	; 0x17
    1cf0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_sendCommand+0x69e>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_sendCommand+0x6fe>
    1d56:	89 e1       	ldi	r24, 0x19	; 25
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
    1d5e:	89 89       	ldd	r24, Y+17	; 0x11
    1d60:	9a 89       	ldd	r25, Y+18	; 0x12
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_sendCommand+0x6ec>
    1d66:	9a 8b       	std	Y+18, r25	; 0x12
    1d68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9c 8b       	std	Y+20, r25	; 0x14
    1d72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8b 89       	ldd	r24, Y+19	; 0x13
    1d76:	9c 89       	ldd	r25, Y+20	; 0x14
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_sendCommand+0x6e0>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d80:	7e 89       	ldd	r23, Y+22	; 0x16
    1d82:	8f 89       	ldd	r24, Y+23	; 0x17
    1d84:	98 8d       	ldd	r25, Y+24	; 0x18
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	8b 89       	ldd	r24, Y+19	; 0x13
    1d94:	9c 89       	ldd	r25, Y+20	; 0x14
    1d96:	98 8b       	std	Y+16, r25	; 0x10
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
    1d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9c:	98 89       	ldd	r25, Y+16	; 0x10
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_sendCommand+0x728>
    1da2:	98 8b       	std	Y+16, r25	; 0x10
    1da4:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1da6:	a2 e3       	ldi	r26, 0x32	; 50
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e2 e3       	ldi	r30, 0x32	; 50
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	8f 7b       	andi	r24, 0xBF	; 191
    1db2:	8c 93       	st	X, r24
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e8       	ldi	r26, 0x80	; 128
    1dba:	bf e3       	ldi	r27, 0x3F	; 63
    1dbc:	8b 87       	std	Y+11, r24	; 0x0b
    1dbe:	9c 87       	std	Y+12, r25	; 0x0c
    1dc0:	ad 87       	std	Y+13, r26	; 0x0d
    1dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	53 e4       	ldi	r21, 0x43	; 67
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8f 83       	std	Y+7, r24	; 0x07
    1dde:	98 87       	std	Y+8, r25	; 0x08
    1de0:	a9 87       	std	Y+9, r26	; 0x09
    1de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <LCD_sendCommand+0x790>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <LCD_sendCommand+0x7f0>
    1e48:	89 e1       	ldi	r24, 0x19	; 25
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_sendCommand+0x7de>
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <LCD_sendCommand+0x7d2>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_sendCommand+0x81a>
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e98:	cd 59       	subi	r28, 0x9D	; 157
    1e9a:	df 4f       	sbci	r29, 0xFF	; 255
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	08 95       	ret

00001eb0 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	c3 56       	subi	r28, 0x63	; 99
    1ebe:	d0 40       	sbci	r29, 0x00	; 0
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ed 59       	subi	r30, 0x9D	; 157
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1ed2:	a2 e3       	ldi	r26, 0x32	; 50
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e2 e3       	ldi	r30, 0x32	; 50
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 61       	ori	r24, 0x10	; 16
    1ede:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1ee0:	a2 e3       	ldi	r26, 0x32	; 50
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e2 e3       	ldi	r30, 0x32	; 50
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8f 7d       	andi	r24, 0xDF	; 223
    1eec:	8c 93       	st	X, r24
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e1 5a       	subi	r30, 0xA1	; 161
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e8       	ldi	r26, 0x80	; 128
    1efa:	bf e3       	ldi	r27, 0x3F	; 63
    1efc:	80 83       	st	Z, r24
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	a2 83       	std	Z+2, r26	; 0x02
    1f02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f04:	8e 01       	movw	r16, r28
    1f06:	05 5a       	subi	r16, 0xA5	; 165
    1f08:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e1 5a       	subi	r30, 0xA1	; 161
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	f8 01       	movw	r30, r16
    1f2a:	80 83       	st	Z, r24
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	a2 83       	std	Z+2, r26	; 0x02
    1f30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f32:	fe 01       	movw	r30, r28
    1f34:	e5 5a       	subi	r30, 0xA5	; 165
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	44 f4       	brge	.+16     	; 0x1f60 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1f50:	fe 01       	movw	r30, r28
    1f52:	e7 5a       	subi	r30, 0xA7	; 167
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
    1f5e:	64 c0       	rjmp	.+200    	; 0x2028 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1f60:	fe 01       	movw	r30, r28
    1f62:	e5 5a       	subi	r30, 0xA5	; 165
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <LCD_displayCharacter+0xd0>
    1f7e:	43 c0       	rjmp	.+134    	; 0x2006 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f80:	fe 01       	movw	r30, r28
    1f82:	e1 5a       	subi	r30, 0xA1	; 161
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	8e 01       	movw	r16, r28
    1fa0:	07 5a       	subi	r16, 0xA7	; 167
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	91 83       	std	Z+1, r25	; 0x01
    1fb4:	80 83       	st	Z, r24
    1fb6:	1f c0       	rjmp	.+62     	; 0x1ff6 <LCD_displayCharacter+0x146>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e9 5a       	subi	r30, 0xA9	; 169
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	89 e1       	ldi	r24, 0x19	; 25
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e9 5a       	subi	r30, 0xA9	; 169
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_displayCharacter+0x120>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e9 5a       	subi	r30, 0xA9	; 169
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fde:	de 01       	movw	r26, r28
    1fe0:	a7 5a       	subi	r26, 0xA7	; 167
    1fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e7 5a       	subi	r30, 0xA7	; 167
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	11 96       	adiw	r26, 0x01	; 1
    1ff2:	9c 93       	st	X, r25
    1ff4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e7 5a       	subi	r30, 0xA7	; 167
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	d1 f6       	brne	.-76     	; 0x1fb8 <LCD_displayCharacter+0x108>
    2004:	27 c0       	rjmp	.+78     	; 0x2054 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	8e 01       	movw	r16, r28
    2008:	07 5a       	subi	r16, 0xA7	; 167
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	fe 01       	movw	r30, r28
    200e:	e5 5a       	subi	r30, 0xA5	; 165
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	f8 01       	movw	r30, r16
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
    2028:	de 01       	movw	r26, r28
    202a:	ab 5a       	subi	r26, 0xAB	; 171
    202c:	bf 4f       	sbci	r27, 0xFF	; 255
    202e:	fe 01       	movw	r30, r28
    2030:	e7 5a       	subi	r30, 0xA7	; 167
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	91 81       	ldd	r25, Z+1	; 0x01
    2038:	8d 93       	st	X+, r24
    203a:	9c 93       	st	X, r25
    203c:	fe 01       	movw	r30, r28
    203e:	eb 5a       	subi	r30, 0xAB	; 171
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_displayCharacter+0x196>
    204a:	fe 01       	movw	r30, r28
    204c:	eb 5a       	subi	r30, 0xAB	; 171
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2054:	a2 e3       	ldi	r26, 0x32	; 50
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e2 e3       	ldi	r30, 0x32	; 50
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	80 64       	ori	r24, 0x40	; 64
    2060:	8c 93       	st	X, r24
    2062:	fe 01       	movw	r30, r28
    2064:	ef 5a       	subi	r30, 0xAF	; 175
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e8       	ldi	r26, 0x80	; 128
    206e:	bf e3       	ldi	r27, 0x3F	; 63
    2070:	80 83       	st	Z, r24
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	a2 83       	std	Z+2, r26	; 0x02
    2076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	8e 01       	movw	r16, r28
    207a:	03 5b       	subi	r16, 0xB3	; 179
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	ef 5a       	subi	r30, 0xAF	; 175
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a e7       	ldi	r20, 0x7A	; 122
    2092:	53 e4       	ldi	r21, 0x43	; 67
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	f8 01       	movw	r30, r16
    209e:	80 83       	st	Z, r24
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	a2 83       	std	Z+2, r26	; 0x02
    20a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a6:	fe 01       	movw	r30, r28
    20a8:	e3 5b       	subi	r30, 0xB3	; 179
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	44 f4       	brge	.+16     	; 0x20d4 <LCD_displayCharacter+0x224>
		__ticks = 1;
    20c4:	fe 01       	movw	r30, r28
    20c6:	e5 5b       	subi	r30, 0xB5	; 181
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
    20d2:	64 c0       	rjmp	.+200    	; 0x219c <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    20d4:	fe 01       	movw	r30, r28
    20d6:	e3 5b       	subi	r30, 0xB3	; 179
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	0c f0       	brlt	.+2      	; 0x20f4 <LCD_displayCharacter+0x244>
    20f2:	43 c0       	rjmp	.+134    	; 0x217a <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f4:	fe 01       	movw	r30, r28
    20f6:	ef 5a       	subi	r30, 0xAF	; 175
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8e 01       	movw	r16, r28
    2114:	05 5b       	subi	r16, 0xB5	; 181
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	f8 01       	movw	r30, r16
    2126:	91 83       	std	Z+1, r25	; 0x01
    2128:	80 83       	st	Z, r24
    212a:	1f c0       	rjmp	.+62     	; 0x216a <LCD_displayCharacter+0x2ba>
    212c:	fe 01       	movw	r30, r28
    212e:	e7 5b       	subi	r30, 0xB7	; 183
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	89 e1       	ldi	r24, 0x19	; 25
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	fe 01       	movw	r30, r28
    213c:	e7 5b       	subi	r30, 0xB7	; 183
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_displayCharacter+0x294>
    2148:	fe 01       	movw	r30, r28
    214a:	e7 5b       	subi	r30, 0xB7	; 183
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	de 01       	movw	r26, r28
    2154:	a5 5b       	subi	r26, 0xB5	; 181
    2156:	bf 4f       	sbci	r27, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	e5 5b       	subi	r30, 0xB5	; 181
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	11 96       	adiw	r26, 0x01	; 1
    2166:	9c 93       	st	X, r25
    2168:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	fe 01       	movw	r30, r28
    216c:	e5 5b       	subi	r30, 0xB5	; 181
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	d1 f6       	brne	.-76     	; 0x212c <LCD_displayCharacter+0x27c>
    2178:	27 c0       	rjmp	.+78     	; 0x21c8 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	8e 01       	movw	r16, r28
    217c:	05 5b       	subi	r16, 0xB5	; 181
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	e3 5b       	subi	r30, 0xB3	; 179
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	f8 01       	movw	r30, r16
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	de 01       	movw	r26, r28
    219e:	a9 5b       	subi	r26, 0xB9	; 185
    21a0:	bf 4f       	sbci	r27, 0xFF	; 255
    21a2:	fe 01       	movw	r30, r28
    21a4:	e5 5b       	subi	r30, 0xB5	; 181
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	8d 93       	st	X+, r24
    21ae:	9c 93       	st	X, r25
    21b0:	fe 01       	movw	r30, r28
    21b2:	e9 5b       	subi	r30, 0xB9	; 185
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <LCD_displayCharacter+0x30a>
    21be:	fe 01       	movw	r30, r28
    21c0:	e9 5b       	subi	r30, 0xB9	; 185
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    21c8:	a5 e3       	ldi	r26, 0x35	; 53
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e5 e3       	ldi	r30, 0x35	; 53
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	98 2f       	mov	r25, r24
    21d4:	9f 70       	andi	r25, 0x0F	; 15
    21d6:	fe 01       	movw	r30, r28
    21d8:	ed 59       	subi	r30, 0x9D	; 157
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	80 7f       	andi	r24, 0xF0	; 240
    21e0:	89 2b       	or	r24, r25
    21e2:	8c 93       	st	X, r24
    21e4:	fe 01       	movw	r30, r28
    21e6:	ed 5b       	subi	r30, 0xBD	; 189
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a0 e8       	ldi	r26, 0x80	; 128
    21f0:	bf e3       	ldi	r27, 0x3F	; 63
    21f2:	80 83       	st	Z, r24
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	a2 83       	std	Z+2, r26	; 0x02
    21f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fa:	8e 01       	movw	r16, r28
    21fc:	01 5c       	subi	r16, 0xC1	; 193
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	ed 5b       	subi	r30, 0xBD	; 189
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a e7       	ldi	r20, 0x7A	; 122
    2214:	53 e4       	ldi	r21, 0x43	; 67
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	f8 01       	movw	r30, r16
    2220:	80 83       	st	Z, r24
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	a2 83       	std	Z+2, r26	; 0x02
    2226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2228:	fe 01       	movw	r30, r28
    222a:	ff 96       	adiw	r30, 0x3f	; 63
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e8       	ldi	r20, 0x80	; 128
    223a:	5f e3       	ldi	r21, 0x3F	; 63
    223c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2240:	88 23       	and	r24, r24
    2242:	2c f4       	brge	.+10     	; 0x224e <LCD_displayCharacter+0x39e>
		__ticks = 1;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9e af       	std	Y+62, r25	; 0x3e
    224a:	8d af       	std	Y+61, r24	; 0x3d
    224c:	46 c0       	rjmp	.+140    	; 0x22da <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    224e:	fe 01       	movw	r30, r28
    2250:	ff 96       	adiw	r30, 0x3f	; 63
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	57 e4       	ldi	r21, 0x47	; 71
    2262:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	64 f5       	brge	.+88     	; 0x22c2 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	fe 01       	movw	r30, r28
    226c:	ed 5b       	subi	r30, 0xBD	; 189
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9e af       	std	Y+62, r25	; 0x3e
    2296:	8d af       	std	Y+61, r24	; 0x3d
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <LCD_displayCharacter+0x408>
    229a:	89 e1       	ldi	r24, 0x19	; 25
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9c af       	std	Y+60, r25	; 0x3c
    22a0:	8b af       	std	Y+59, r24	; 0x3b
    22a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    22a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <LCD_displayCharacter+0x3f6>
    22aa:	9c af       	std	Y+60, r25	; 0x3c
    22ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    22b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	9e af       	std	Y+62, r25	; 0x3e
    22b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	69 f7       	brne	.-38     	; 0x229a <LCD_displayCharacter+0x3ea>
    22c0:	16 c0       	rjmp	.+44     	; 0x22ee <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	fe 01       	movw	r30, r28
    22c4:	ff 96       	adiw	r30, 0x3f	; 63
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9e af       	std	Y+62, r25	; 0x3e
    22d8:	8d af       	std	Y+61, r24	; 0x3d
    22da:	8d ad       	ldd	r24, Y+61	; 0x3d
    22dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    22de:	9a af       	std	Y+58, r25	; 0x3a
    22e0:	89 af       	std	Y+57, r24	; 0x39
    22e2:	89 ad       	ldd	r24, Y+57	; 0x39
    22e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <LCD_displayCharacter+0x436>
    22ea:	9a af       	std	Y+58, r25	; 0x3a
    22ec:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    22ee:	a2 e3       	ldi	r26, 0x32	; 50
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e2 e3       	ldi	r30, 0x32	; 50
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	8f 7b       	andi	r24, 0xBF	; 191
    22fa:	8c 93       	st	X, r24
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 e8       	ldi	r26, 0x80	; 128
    2302:	bf e3       	ldi	r27, 0x3F	; 63
    2304:	8d ab       	std	Y+53, r24	; 0x35
    2306:	9e ab       	std	Y+54, r25	; 0x36
    2308:	af ab       	std	Y+55, r26	; 0x37
    230a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	6d a9       	ldd	r22, Y+53	; 0x35
    230e:	7e a9       	ldd	r23, Y+54	; 0x36
    2310:	8f a9       	ldd	r24, Y+55	; 0x37
    2312:	98 ad       	ldd	r25, Y+56	; 0x38
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a e7       	ldi	r20, 0x7A	; 122
    231a:	53 e4       	ldi	r21, 0x43	; 67
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	89 ab       	std	Y+49, r24	; 0x31
    2326:	9a ab       	std	Y+50, r25	; 0x32
    2328:	ab ab       	std	Y+51, r26	; 0x33
    232a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    232c:	69 a9       	ldd	r22, Y+49	; 0x31
    232e:	7a a9       	ldd	r23, Y+50	; 0x32
    2330:	8b a9       	ldd	r24, Y+51	; 0x33
    2332:	9c a9       	ldd	r25, Y+52	; 0x34
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <LCD_displayCharacter+0x49e>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	98 ab       	std	Y+48, r25	; 0x30
    234a:	8f a7       	std	Y+47, r24	; 0x2f
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    234e:	69 a9       	ldd	r22, Y+49	; 0x31
    2350:	7a a9       	ldd	r23, Y+50	; 0x32
    2352:	8b a9       	ldd	r24, Y+51	; 0x33
    2354:	9c a9       	ldd	r25, Y+52	; 0x34
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	4c f5       	brge	.+82     	; 0x23b8 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	6d a9       	ldd	r22, Y+53	; 0x35
    2368:	7e a9       	ldd	r23, Y+54	; 0x36
    236a:	8f a9       	ldd	r24, Y+55	; 0x37
    236c:	98 ad       	ldd	r25, Y+56	; 0x38
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	98 ab       	std	Y+48, r25	; 0x30
    238c:	8f a7       	std	Y+47, r24	; 0x2f
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <LCD_displayCharacter+0x4fe>
    2390:	89 e1       	ldi	r24, 0x19	; 25
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9e a7       	std	Y+46, r25	; 0x2e
    2396:	8d a7       	std	Y+45, r24	; 0x2d
    2398:	8d a5       	ldd	r24, Y+45	; 0x2d
    239a:	9e a5       	ldd	r25, Y+46	; 0x2e
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <LCD_displayCharacter+0x4ec>
    23a0:	9e a7       	std	Y+46, r25	; 0x2e
    23a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a6:	98 a9       	ldd	r25, Y+48	; 0x30
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	98 ab       	std	Y+48, r25	; 0x30
    23ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b0:	98 a9       	ldd	r25, Y+48	; 0x30
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <LCD_displayCharacter+0x4e0>
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ba:	7a a9       	ldd	r23, Y+50	; 0x32
    23bc:	8b a9       	ldd	r24, Y+51	; 0x33
    23be:	9c a9       	ldd	r25, Y+52	; 0x34
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	98 ab       	std	Y+48, r25	; 0x30
    23ca:	8f a7       	std	Y+47, r24	; 0x2f
    23cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ce:	98 a9       	ldd	r25, Y+48	; 0x30
    23d0:	9c a7       	std	Y+44, r25	; 0x2c
    23d2:	8b a7       	std	Y+43, r24	; 0x2b
    23d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_displayCharacter+0x528>
    23dc:	9c a7       	std	Y+44, r25	; 0x2c
    23de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    23e0:	a2 e3       	ldi	r26, 0x32	; 50
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e2 e3       	ldi	r30, 0x32	; 50
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	80 64       	ori	r24, 0x40	; 64
    23ec:	8c 93       	st	X, r24
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	a0 e8       	ldi	r26, 0x80	; 128
    23f4:	bf e3       	ldi	r27, 0x3F	; 63
    23f6:	8f a3       	std	Y+39, r24	; 0x27
    23f8:	98 a7       	std	Y+40, r25	; 0x28
    23fa:	a9 a7       	std	Y+41, r26	; 0x29
    23fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2400:	78 a5       	ldd	r23, Y+40	; 0x28
    2402:	89 a5       	ldd	r24, Y+41	; 0x29
    2404:	9a a5       	ldd	r25, Y+42	; 0x2a
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	4a e7       	ldi	r20, 0x7A	; 122
    240c:	53 e4       	ldi	r21, 0x43	; 67
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	8b a3       	std	Y+35, r24	; 0x23
    2418:	9c a3       	std	Y+36, r25	; 0x24
    241a:	ad a3       	std	Y+37, r26	; 0x25
    241c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    241e:	6b a1       	ldd	r22, Y+35	; 0x23
    2420:	7c a1       	ldd	r23, Y+36	; 0x24
    2422:	8d a1       	ldd	r24, Y+37	; 0x25
    2424:	9e a1       	ldd	r25, Y+38	; 0x26
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e8       	ldi	r20, 0x80	; 128
    242c:	5f e3       	ldi	r21, 0x3F	; 63
    242e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2432:	88 23       	and	r24, r24
    2434:	2c f4       	brge	.+10     	; 0x2440 <LCD_displayCharacter+0x590>
		__ticks = 1;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9a a3       	std	Y+34, r25	; 0x22
    243c:	89 a3       	std	Y+33, r24	; 0x21
    243e:	3f c0       	rjmp	.+126    	; 0x24be <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2440:	6b a1       	ldd	r22, Y+35	; 0x23
    2442:	7c a1       	ldd	r23, Y+36	; 0x24
    2444:	8d a1       	ldd	r24, Y+37	; 0x25
    2446:	9e a1       	ldd	r25, Y+38	; 0x26
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	3f ef       	ldi	r19, 0xFF	; 255
    244c:	4f e7       	ldi	r20, 0x7F	; 127
    244e:	57 e4       	ldi	r21, 0x47	; 71
    2450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2454:	18 16       	cp	r1, r24
    2456:	4c f5       	brge	.+82     	; 0x24aa <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2458:	6f a1       	ldd	r22, Y+39	; 0x27
    245a:	78 a5       	ldd	r23, Y+40	; 0x28
    245c:	89 a5       	ldd	r24, Y+41	; 0x29
    245e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e2       	ldi	r20, 0x20	; 32
    2466:	51 e4       	ldi	r21, 0x41	; 65
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9a a3       	std	Y+34, r25	; 0x22
    247e:	89 a3       	std	Y+33, r24	; 0x21
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <LCD_displayCharacter+0x5f0>
    2482:	89 e1       	ldi	r24, 0x19	; 25
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	98 a3       	std	Y+32, r25	; 0x20
    2488:	8f 8f       	std	Y+31, r24	; 0x1f
    248a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    248c:	98 a1       	ldd	r25, Y+32	; 0x20
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <LCD_displayCharacter+0x5de>
    2492:	98 a3       	std	Y+32, r25	; 0x20
    2494:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2496:	89 a1       	ldd	r24, Y+33	; 0x21
    2498:	9a a1       	ldd	r25, Y+34	; 0x22
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	9a a3       	std	Y+34, r25	; 0x22
    249e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a0:	89 a1       	ldd	r24, Y+33	; 0x21
    24a2:	9a a1       	ldd	r25, Y+34	; 0x22
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	69 f7       	brne	.-38     	; 0x2482 <LCD_displayCharacter+0x5d2>
    24a8:	14 c0       	rjmp	.+40     	; 0x24d2 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24aa:	6b a1       	ldd	r22, Y+35	; 0x23
    24ac:	7c a1       	ldd	r23, Y+36	; 0x24
    24ae:	8d a1       	ldd	r24, Y+37	; 0x25
    24b0:	9e a1       	ldd	r25, Y+38	; 0x26
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9a a3       	std	Y+34, r25	; 0x22
    24bc:	89 a3       	std	Y+33, r24	; 0x21
    24be:	89 a1       	ldd	r24, Y+33	; 0x21
    24c0:	9a a1       	ldd	r25, Y+34	; 0x22
    24c2:	9e 8f       	std	Y+30, r25	; 0x1e
    24c4:	8d 8f       	std	Y+29, r24	; 0x1d
    24c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_displayCharacter+0x61a>
    24ce:	9e 8f       	std	Y+30, r25	; 0x1e
    24d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    24d2:	a5 e3       	ldi	r26, 0x35	; 53
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e5 e3       	ldi	r30, 0x35	; 53
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	28 2f       	mov	r18, r24
    24de:	2f 70       	andi	r18, 0x0F	; 15
    24e0:	fe 01       	movw	r30, r28
    24e2:	ed 59       	subi	r30, 0x9D	; 157
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	88 2f       	mov	r24, r24
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	82 95       	swap	r24
    24ee:	92 95       	swap	r25
    24f0:	90 7f       	andi	r25, 0xF0	; 240
    24f2:	98 27       	eor	r25, r24
    24f4:	80 7f       	andi	r24, 0xF0	; 240
    24f6:	98 27       	eor	r25, r24
    24f8:	82 2b       	or	r24, r18
    24fa:	8c 93       	st	X, r24
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a0 e8       	ldi	r26, 0x80	; 128
    2502:	bf e3       	ldi	r27, 0x3F	; 63
    2504:	89 8f       	std	Y+25, r24	; 0x19
    2506:	9a 8f       	std	Y+26, r25	; 0x1a
    2508:	ab 8f       	std	Y+27, r26	; 0x1b
    250a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250c:	69 8d       	ldd	r22, Y+25	; 0x19
    250e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	4a e7       	ldi	r20, 0x7A	; 122
    251a:	53 e4       	ldi	r21, 0x43	; 67
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	8d 8b       	std	Y+21, r24	; 0x15
    2526:	9e 8b       	std	Y+22, r25	; 0x16
    2528:	af 8b       	std	Y+23, r26	; 0x17
    252a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    252c:	6d 89       	ldd	r22, Y+21	; 0x15
    252e:	7e 89       	ldd	r23, Y+22	; 0x16
    2530:	8f 89       	ldd	r24, Y+23	; 0x17
    2532:	98 8d       	ldd	r25, Y+24	; 0x18
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e8       	ldi	r20, 0x80	; 128
    253a:	5f e3       	ldi	r21, 0x3F	; 63
    253c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2540:	88 23       	and	r24, r24
    2542:	2c f4       	brge	.+10     	; 0x254e <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 8b       	std	Y+20, r25	; 0x14
    254a:	8b 8b       	std	Y+19, r24	; 0x13
    254c:	3f c0       	rjmp	.+126    	; 0x25cc <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    254e:	6d 89       	ldd	r22, Y+21	; 0x15
    2550:	7e 89       	ldd	r23, Y+22	; 0x16
    2552:	8f 89       	ldd	r24, Y+23	; 0x17
    2554:	98 8d       	ldd	r25, Y+24	; 0x18
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	3f ef       	ldi	r19, 0xFF	; 255
    255a:	4f e7       	ldi	r20, 0x7F	; 127
    255c:	57 e4       	ldi	r21, 0x47	; 71
    255e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2562:	18 16       	cp	r1, r24
    2564:	4c f5       	brge	.+82     	; 0x25b8 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2566:	69 8d       	ldd	r22, Y+25	; 0x19
    2568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9c 8b       	std	Y+20, r25	; 0x14
    258c:	8b 8b       	std	Y+19, r24	; 0x13
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <LCD_displayCharacter+0x6fe>
    2590:	89 e1       	ldi	r24, 0x19	; 25
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9a 8b       	std	Y+18, r25	; 0x12
    2596:	89 8b       	std	Y+17, r24	; 0x11
    2598:	89 89       	ldd	r24, Y+17	; 0x11
    259a:	9a 89       	ldd	r25, Y+18	; 0x12
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_displayCharacter+0x6ec>
    25a0:	9a 8b       	std	Y+18, r25	; 0x12
    25a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	8b 89       	ldd	r24, Y+19	; 0x13
    25a6:	9c 89       	ldd	r25, Y+20	; 0x14
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9c 8b       	std	Y+20, r25	; 0x14
    25ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	8b 89       	ldd	r24, Y+19	; 0x13
    25b0:	9c 89       	ldd	r25, Y+20	; 0x14
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	69 f7       	brne	.-38     	; 0x2590 <LCD_displayCharacter+0x6e0>
    25b6:	14 c0       	rjmp	.+40     	; 0x25e0 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ba:	7e 89       	ldd	r23, Y+22	; 0x16
    25bc:	8f 89       	ldd	r24, Y+23	; 0x17
    25be:	98 8d       	ldd	r25, Y+24	; 0x18
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9c 8b       	std	Y+20, r25	; 0x14
    25ca:	8b 8b       	std	Y+19, r24	; 0x13
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	98 8b       	std	Y+16, r25	; 0x10
    25d2:	8f 87       	std	Y+15, r24	; 0x0f
    25d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d6:	98 89       	ldd	r25, Y+16	; 0x10
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <LCD_displayCharacter+0x728>
    25dc:	98 8b       	std	Y+16, r25	; 0x10
    25de:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    25e0:	a2 e3       	ldi	r26, 0x32	; 50
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e2 e3       	ldi	r30, 0x32	; 50
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	8f 7b       	andi	r24, 0xBF	; 191
    25ec:	8c 93       	st	X, r24
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a0 e8       	ldi	r26, 0x80	; 128
    25f4:	bf e3       	ldi	r27, 0x3F	; 63
    25f6:	8b 87       	std	Y+11, r24	; 0x0b
    25f8:	9c 87       	std	Y+12, r25	; 0x0c
    25fa:	ad 87       	std	Y+13, r26	; 0x0d
    25fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2600:	7c 85       	ldd	r23, Y+12	; 0x0c
    2602:	8d 85       	ldd	r24, Y+13	; 0x0d
    2604:	9e 85       	ldd	r25, Y+14	; 0x0e
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	4a e7       	ldi	r20, 0x7A	; 122
    260c:	53 e4       	ldi	r21, 0x43	; 67
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	8f 83       	std	Y+7, r24	; 0x07
    2618:	98 87       	std	Y+8, r25	; 0x08
    261a:	a9 87       	std	Y+9, r26	; 0x09
    261c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    261e:	6f 81       	ldd	r22, Y+7	; 0x07
    2620:	78 85       	ldd	r23, Y+8	; 0x08
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e8       	ldi	r20, 0x80	; 128
    262c:	5f e3       	ldi	r21, 0x3F	; 63
    262e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2632:	88 23       	and	r24, r24
    2634:	2c f4       	brge	.+10     	; 0x2640 <LCD_displayCharacter+0x790>
		__ticks = 1;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	3f c0       	rjmp	.+126    	; 0x26be <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	3f ef       	ldi	r19, 0xFF	; 255
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	57 e4       	ldi	r21, 0x47	; 71
    2650:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	4c f5       	brge	.+82     	; 0x26aa <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2658:	6b 85       	ldd	r22, Y+11	; 0x0b
    265a:	7c 85       	ldd	r23, Y+12	; 0x0c
    265c:	8d 85       	ldd	r24, Y+13	; 0x0d
    265e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	9e 83       	std	Y+6, r25	; 0x06
    267e:	8d 83       	std	Y+5, r24	; 0x05
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <LCD_displayCharacter+0x7f0>
    2682:	89 e1       	ldi	r24, 0x19	; 25
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9c 83       	std	Y+4, r25	; 0x04
    2688:	8b 83       	std	Y+3, r24	; 0x03
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <LCD_displayCharacter+0x7de>
    2692:	9c 83       	std	Y+4, r25	; 0x04
    2694:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	69 f7       	brne	.-38     	; 0x2682 <LCD_displayCharacter+0x7d2>
    26a8:	14 c0       	rjmp	.+40     	; 0x26d2 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26aa:	6f 81       	ldd	r22, Y+7	; 0x07
    26ac:	78 85       	ldd	r23, Y+8	; 0x08
    26ae:	89 85       	ldd	r24, Y+9	; 0x09
    26b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	9a 83       	std	Y+2, r25	; 0x02
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_displayCharacter+0x81a>
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26d2:	cd 59       	subi	r28, 0x9D	; 157
    26d4:	df 4f       	sbci	r29, 0xFF	; 255
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	08 95       	ret

000026ea <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <LCD_displayString+0x6>
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26fa:	19 82       	std	Y+1, r1	; 0x01
    26fc:	0e c0       	rjmp	.+28     	; 0x271a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	fc 01       	movw	r30, r24
    270a:	e2 0f       	add	r30, r18
    270c:	f3 1f       	adc	r31, r19
    270e:	80 81       	ld	r24, Z
    2710:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_displayCharacter>
		i++;
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	8f 5f       	subi	r24, 0xFF	; 255
    2718:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	9b 81       	ldd	r25, Y+3	; 0x03
    2724:	fc 01       	movw	r30, r24
    2726:	e2 0f       	add	r30, r18
    2728:	f3 1f       	adc	r31, r19
    272a:	80 81       	ld	r24, Z
    272c:	88 23       	and	r24, r24
    272e:	39 f7       	brne	.-50     	; 0x26fe <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	00 d0       	rcall	.+0      	; 0x2742 <LCD_goToRowColumn+0x6>
    2742:	00 d0       	rcall	.+0      	; 0x2744 <LCD_goToRowColumn+0x8>
    2744:	0f 92       	push	r0
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	8a 83       	std	Y+2, r24	; 0x02
    274c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	3d 83       	std	Y+5, r19	; 0x05
    2756:	2c 83       	std	Y+4, r18	; 0x04
    2758:	8c 81       	ldd	r24, Y+4	; 0x04
    275a:	9d 81       	ldd	r25, Y+5	; 0x05
    275c:	81 30       	cpi	r24, 0x01	; 1
    275e:	91 05       	cpc	r25, r1
    2760:	c1 f0       	breq	.+48     	; 0x2792 <LCD_goToRowColumn+0x56>
    2762:	2c 81       	ldd	r18, Y+4	; 0x04
    2764:	3d 81       	ldd	r19, Y+5	; 0x05
    2766:	22 30       	cpi	r18, 0x02	; 2
    2768:	31 05       	cpc	r19, r1
    276a:	2c f4       	brge	.+10     	; 0x2776 <LCD_goToRowColumn+0x3a>
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	9d 81       	ldd	r25, Y+5	; 0x05
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	61 f0       	breq	.+24     	; 0x278c <LCD_goToRowColumn+0x50>
    2774:	19 c0       	rjmp	.+50     	; 0x27a8 <LCD_goToRowColumn+0x6c>
    2776:	2c 81       	ldd	r18, Y+4	; 0x04
    2778:	3d 81       	ldd	r19, Y+5	; 0x05
    277a:	22 30       	cpi	r18, 0x02	; 2
    277c:	31 05       	cpc	r19, r1
    277e:	69 f0       	breq	.+26     	; 0x279a <LCD_goToRowColumn+0x5e>
    2780:	8c 81       	ldd	r24, Y+4	; 0x04
    2782:	9d 81       	ldd	r25, Y+5	; 0x05
    2784:	83 30       	cpi	r24, 0x03	; 3
    2786:	91 05       	cpc	r25, r1
    2788:	61 f0       	breq	.+24     	; 0x27a2 <LCD_goToRowColumn+0x66>
    278a:	0e c0       	rjmp	.+28     	; 0x27a8 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	0b c0       	rjmp	.+22     	; 0x27a8 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	80 5c       	subi	r24, 0xC0	; 192
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	07 c0       	rjmp	.+14     	; 0x27a8 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	80 5f       	subi	r24, 0xF0	; 240
    279e:	89 83       	std	Y+1, r24	; 0x01
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	80 5b       	subi	r24, 0xB0	; 176
    27a6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	80 68       	ori	r24, 0x80	; 128
    27ac:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
}
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <LCD_displayStringRowColumn+0x6>
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <LCD_displayStringRowColumn+0x8>
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	6a 83       	std	Y+2, r22	; 0x02
    27d0:	5c 83       	std	Y+4, r21	; 0x04
    27d2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	6a 81       	ldd	r22, Y+2	; 0x02
    27d8:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
}
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	62 97       	sbiw	r28, 0x12	; 18
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	9a 8b       	std	Y+18, r25	; 0x12
    2808:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    280a:	89 89       	ldd	r24, Y+17	; 0x11
    280c:	9a 89       	ldd	r25, Y+18	; 0x12
    280e:	9e 01       	movw	r18, r28
    2810:	2f 5f       	subi	r18, 0xFF	; 255
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	b9 01       	movw	r22, r18
    2816:	4a e0       	ldi	r20, 0x0A	; 10
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <itoa>
   LCD_displayString(buff);
    281e:	ce 01       	movw	r24, r28
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	0e 94 75 13 	call	0x26ea	; 0x26ea <LCD_displayString>
}
    2826:	62 96       	adiw	r28, 0x12	; 18
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	0e 94 3b 0b 	call	0x1676	; 0x1676 <LCD_sendCommand>
}
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <__vector_9>:

/****************************************************************
 *                      ISR Definitions                         *
 ****************************************************************/
ISR(TIMER0_OVF_vect)
{
    284c:	1f 92       	push	r1
    284e:	0f 92       	push	r0
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	0f 92       	push	r0
    2854:	11 24       	eor	r1, r1
    2856:	2f 93       	push	r18
    2858:	3f 93       	push	r19
    285a:	4f 93       	push	r20
    285c:	5f 93       	push	r21
    285e:	6f 93       	push	r22
    2860:	7f 93       	push	r23
    2862:	8f 93       	push	r24
    2864:	9f 93       	push	r25
    2866:	af 93       	push	r26
    2868:	bf 93       	push	r27
    286a:	ef 93       	push	r30
    286c:	ff 93       	push	r31
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2876:	80 91 ec 00 	lds	r24, 0x00EC
    287a:	90 91 ed 00 	lds	r25, 0x00ED
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	29 f0       	breq	.+10     	; 0x288c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2882:	e0 91 ec 00 	lds	r30, 0x00EC
    2886:	f0 91 ed 00 	lds	r31, 0x00ED
    288a:	09 95       	icall
	}
}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	ff 91       	pop	r31
    2892:	ef 91       	pop	r30
    2894:	bf 91       	pop	r27
    2896:	af 91       	pop	r26
    2898:	9f 91       	pop	r25
    289a:	8f 91       	pop	r24
    289c:	7f 91       	pop	r23
    289e:	6f 91       	pop	r22
    28a0:	5f 91       	pop	r21
    28a2:	4f 91       	pop	r20
    28a4:	3f 91       	pop	r19
    28a6:	2f 91       	pop	r18
    28a8:	0f 90       	pop	r0
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	0f 90       	pop	r0
    28ae:	1f 90       	pop	r1
    28b0:	18 95       	reti

000028b2 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    28b2:	1f 92       	push	r1
    28b4:	0f 92       	push	r0
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	0f 92       	push	r0
    28ba:	11 24       	eor	r1, r1
    28bc:	2f 93       	push	r18
    28be:	3f 93       	push	r19
    28c0:	4f 93       	push	r20
    28c2:	5f 93       	push	r21
    28c4:	6f 93       	push	r22
    28c6:	7f 93       	push	r23
    28c8:	8f 93       	push	r24
    28ca:	9f 93       	push	r25
    28cc:	af 93       	push	r26
    28ce:	bf 93       	push	r27
    28d0:	ef 93       	push	r30
    28d2:	ff 93       	push	r31
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    28dc:	80 91 ec 00 	lds	r24, 0x00EC
    28e0:	90 91 ed 00 	lds	r25, 0x00ED
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	29 f0       	breq	.+10     	; 0x28f2 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    28e8:	e0 91 ec 00 	lds	r30, 0x00EC
    28ec:	f0 91 ed 00 	lds	r31, 0x00ED
    28f0:	09 95       	icall
	}
}
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	ff 91       	pop	r31
    28f8:	ef 91       	pop	r30
    28fa:	bf 91       	pop	r27
    28fc:	af 91       	pop	r26
    28fe:	9f 91       	pop	r25
    2900:	8f 91       	pop	r24
    2902:	7f 91       	pop	r23
    2904:	6f 91       	pop	r22
    2906:	5f 91       	pop	r21
    2908:	4f 91       	pop	r20
    290a:	3f 91       	pop	r19
    290c:	2f 91       	pop	r18
    290e:	0f 90       	pop	r0
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	0f 90       	pop	r0
    2914:	1f 90       	pop	r1
    2916:	18 95       	reti

00002918 <TIMER0_init>:

/****************************************************************
 *                      Functions Definitions                   *
 ****************************************************************/
void TIMER0_init(const TIMER0_ConfigType * Config_Ptr)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	00 d0       	rcall	.+0      	; 0x291e <TIMER0_init+0x6>
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initVal; /* Timer initial value */
    2926:	a2 e5       	ldi	r26, 0x52	; 82
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e9 81       	ldd	r30, Y+1	; 0x01
    292c:	fa 81       	ldd	r31, Y+2	; 0x02
    292e:	81 81       	ldd	r24, Z+1	; 0x01
    2930:	8c 93       	st	X, r24
	 * Configure timer control register:
	 * Non PWM mode FOC0=1
	 * Normal Port Operation
	 * clock = as configured
	 */
	TCCR0 = (TCCR0 & 0xF8) | (1<<FOC0) | (Config_Ptr->prescaler);
    2932:	a3 e5       	ldi	r26, 0x53	; 83
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e3 e5       	ldi	r30, 0x53	; 83
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	88 77       	andi	r24, 0x78	; 120
    293e:	98 2f       	mov	r25, r24
    2940:	90 68       	ori	r25, 0x80	; 128
    2942:	e9 81       	ldd	r30, Y+1	; 0x01
    2944:	fa 81       	ldd	r31, Y+2	; 0x02
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	89 2b       	or	r24, r25
    294a:	8c 93       	st	X, r24
	/*
	 * Configurations specific to Compare Mode
	 */
	if(Config_Ptr->mode)
    294c:	e9 81       	ldd	r30, Y+1	; 0x01
    294e:	fa 81       	ldd	r31, Y+2	; 0x02
    2950:	80 81       	ld	r24, Z
    2952:	88 23       	and	r24, r24
    2954:	b1 f0       	breq	.+44     	; 0x2982 <TIMER0_init+0x6a>
	{
		TCCR0 |= (1<<WGM01); /* Selecting Compare Mode */
    2956:	a3 e5       	ldi	r26, 0x53	; 83
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e3 e5       	ldi	r30, 0x53	; 83
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	88 60       	ori	r24, 0x08	; 8
    2962:	8c 93       	st	X, r24
		OCR0 = Config_Ptr->compVal; /* Selecting Compare Value */
    2964:	ac e5       	ldi	r26, 0x5C	; 92
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e9 81       	ldd	r30, Y+1	; 0x01
    296a:	fa 81       	ldd	r31, Y+2	; 0x02
    296c:	83 81       	ldd	r24, Z+3	; 0x03
    296e:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xFC) | (1<<OCIE0); /* Enable Compare Match Interrupt */
    2970:	a9 e5       	ldi	r26, 0x59	; 89
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e9 e5       	ldi	r30, 0x59	; 89
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	8c 7f       	andi	r24, 0xFC	; 252
    297c:	82 60       	ori	r24, 0x02	; 2
    297e:	8c 93       	st	X, r24
    2980:	08 c0       	rjmp	.+16     	; 0x2992 <TIMER0_init+0x7a>
	}
	else
	{
		/* Enable Overflow (Normal) Interrupt */
		TIMSK= (TIMSK & 0xFC) | (1<<TOIE0);
    2982:	a9 e5       	ldi	r26, 0x59	; 89
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e9 e5       	ldi	r30, 0x59	; 89
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	8c 7f       	andi	r24, 0xFC	; 252
    298e:	81 60       	ori	r24, 0x01	; 1
    2990:	8c 93       	st	X, r24
	}
}
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <TIMER0_setCallBack>:

void TIMER0_setCallBack(void(*a_ptr)(void))
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <TIMER0_setCallBack+0x6>
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	90 93 ed 00 	sts	0x00ED, r25
    29b2:	80 93 ec 00 	sts	0x00EC, r24
}
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	08 95       	ret

000029c0 <TIMER0_stop>:

void TIMER0_stop(void)
{
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Selecting no clock i.e stopping the timer
	 */
	TCCR0 = (TCCR0 & 0xF8);
    29c8:	a3 e5       	ldi	r26, 0x53	; 83
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e3 e5       	ldi	r30, 0x53	; 83
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	88 7f       	andi	r24, 0xF8	; 248
    29d4:	8c 93       	st	X, r24
}
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <TIMER0_setDutyCycle>:

void TIMER0_setDutyCycle(uint8 a_duty)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	0f 92       	push	r0
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = a_duty;
    29e8:	ec e5       	ldi	r30, 0x5C	; 92
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	80 83       	st	Z, r24
}
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <__vector_11>:
/*******************************************************************************
 *                      ISR Definition                                         *
 *******************************************************************************/

ISR(USART_RXC_vect)
{
    29f8:	1f 92       	push	r1
    29fa:	0f 92       	push	r0
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	0f 92       	push	r0
    2a00:	11 24       	eor	r1, r1
    2a02:	2f 93       	push	r18
    2a04:	3f 93       	push	r19
    2a06:	4f 93       	push	r20
    2a08:	5f 93       	push	r21
    2a0a:	6f 93       	push	r22
    2a0c:	7f 93       	push	r23
    2a0e:	8f 93       	push	r24
    2a10:	9f 93       	push	r25
    2a12:	af 93       	push	r26
    2a14:	bf 93       	push	r27
    2a16:	ef 93       	push	r30
    2a18:	ff 93       	push	r31
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    2a22:	80 91 ee 00 	lds	r24, 0x00EE
    2a26:	90 91 ef 00 	lds	r25, 0x00EF
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	29 f0       	breq	.+10     	; 0x2a38 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a2e:	e0 91 ee 00 	lds	r30, 0x00EE
    2a32:	f0 91 ef 00 	lds	r31, 0x00EF
    2a36:	09 95       	icall
	}
}
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	ff 91       	pop	r31
    2a3e:	ef 91       	pop	r30
    2a40:	bf 91       	pop	r27
    2a42:	af 91       	pop	r26
    2a44:	9f 91       	pop	r25
    2a46:	8f 91       	pop	r24
    2a48:	7f 91       	pop	r23
    2a4a:	6f 91       	pop	r22
    2a4c:	5f 91       	pop	r21
    2a4e:	4f 91       	pop	r20
    2a50:	3f 91       	pop	r19
    2a52:	2f 91       	pop	r18
    2a54:	0f 90       	pop	r0
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	0f 90       	pop	r0
    2a5a:	1f 90       	pop	r1
    2a5c:	18 95       	reti

00002a5e <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <UART_init+0xa>
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a70:	eb e2       	ldi	r30, 0x2B	; 43
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	80 83       	st	Z, r24
	if (Config_Ptr->size == NINE_BITS)
    2a78:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7c:	81 81       	ldd	r24, Z+1	; 0x01
    2a7e:	83 30       	cpi	r24, 0x03	; 3
    2a80:	49 f4       	brne	.+18     	; 0x2a94 <UART_init+0x36>
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 1 For 9-bit data mode
		 * RXB8 & TXB8 are used for 9-bit data mode
		 * so masking is needed
		 ***********************************************************************/
		UCSRB = (UCSRB & 0x03) | (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
    2a82:	aa e2       	ldi	r26, 0x2A	; 42
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	ea e2       	ldi	r30, 0x2A	; 42
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	83 70       	andi	r24, 0x03	; 3
    2a8e:	88 69       	ori	r24, 0x98	; 152
    2a90:	8c 93       	st	X, r24
    2a92:	04 c0       	rjmp	.+8      	; 0x2a9c <UART_init+0x3e>
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 5-bit , 6-bit , 7-bit and 8-bit data mode
		 * RXB8 & TXB8 not used for 5-bit , 6-bit , 7-bit and 8-bit data mode
		 ***********************************************************************/
		UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
    2a94:	ea e2       	ldi	r30, 0x2A	; 42
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	88 e9       	ldi	r24, 0x98	; 152
    2a9a:	80 83       	st	Z, r24
	 * UPM1:0  = parity_mode to choose parity bit
	 * USBS    = whatever configured
	 * UCSZ1:0 = size For any data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((Config_Ptr->size)<<1) | ((Config_Ptr->parity_mode)<<4) | ((Config_Ptr->number)<<3);
    2a9c:	a0 e4       	ldi	r26, 0x40	; 64
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	81 81       	ldd	r24, Z+1	; 0x01
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	28 2f       	mov	r18, r24
    2ab0:	20 68       	ori	r18, 0x80	; 128
    2ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab6:	83 81       	ldd	r24, Z+3	; 0x03
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	82 95       	swap	r24
    2abe:	92 95       	swap	r25
    2ac0:	90 7f       	andi	r25, 0xF0	; 240
    2ac2:	98 27       	eor	r25, r24
    2ac4:	80 7f       	andi	r24, 0xF0	; 240
    2ac6:	98 27       	eor	r25, r24
    2ac8:	28 2b       	or	r18, r24
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	88 2f       	mov	r24, r24
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	82 2b       	or	r24, r18
    2ae2:	8c 93       	st	X, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2ae4:	00 e4       	ldi	r16, 0x40	; 64
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
    2ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aea:	fa 81       	ldd	r31, Y+2	; 0x02
    2aec:	80 81       	ld	r24, Z
    2aee:	88 2f       	mov	r24, r24
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	a0 e0       	ldi	r26, 0x00	; 0
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	aa 1f       	adc	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	aa 1f       	adc	r26, r26
    2b04:	bb 1f       	adc	r27, r27
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	aa 1f       	adc	r26, r26
    2b0c:	bb 1f       	adc	r27, r27
    2b0e:	9c 01       	movw	r18, r24
    2b10:	ad 01       	movw	r20, r26
    2b12:	80 e4       	ldi	r24, 0x40	; 64
    2b14:	92 e4       	ldi	r25, 0x42	; 66
    2b16:	af e0       	ldi	r26, 0x0F	; 15
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__udivmodsi4>
    2b22:	da 01       	movw	r26, r20
    2b24:	c9 01       	movw	r24, r18
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	a1 09       	sbc	r26, r1
    2b2a:	b1 09       	sbc	r27, r1
    2b2c:	89 2f       	mov	r24, r25
    2b2e:	9a 2f       	mov	r25, r26
    2b30:	ab 2f       	mov	r26, r27
    2b32:	bb 27       	eor	r27, r27
    2b34:	f8 01       	movw	r30, r16
    2b36:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
    2b38:	09 e2       	ldi	r16, 0x29	; 41
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b40:	80 81       	ld	r24, Z
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a0 e0       	ldi	r26, 0x00	; 0
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	aa 1f       	adc	r26, r26
    2b50:	bb 1f       	adc	r27, r27
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	aa 1f       	adc	r26, r26
    2b58:	bb 1f       	adc	r27, r27
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	aa 1f       	adc	r26, r26
    2b60:	bb 1f       	adc	r27, r27
    2b62:	9c 01       	movw	r18, r24
    2b64:	ad 01       	movw	r20, r26
    2b66:	80 e4       	ldi	r24, 0x40	; 64
    2b68:	92 e4       	ldi	r25, 0x42	; 66
    2b6a:	af e0       	ldi	r26, 0x0F	; 15
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__udivmodsi4>
    2b76:	da 01       	movw	r26, r20
    2b78:	c9 01       	movw	r24, r18
    2b7a:	81 50       	subi	r24, 0x01	; 1
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	80 83       	st	Z, r24
}
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	08 95       	ret

00002b8e <UART_sendByte>:
	
void UART_sendByte(const uint16 data)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <UART_sendByte+0x6>
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b9c:	eb e2       	ldi	r30, 0x2B	; 43
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	88 2f       	mov	r24, r24
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	80 72       	andi	r24, 0x20	; 32
    2ba8:	90 70       	andi	r25, 0x00	; 0
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	b9 f3       	breq	.-18     	; 0x2b9c <UART_sendByte+0xe>
	/* if 9-bit mode is used, the ninth bit is put in bit TXB8 in register UCSRB
	 */
	if ((UCSRB & (1<<2)))
    2bae:	ea e2       	ldi	r30, 0x2A	; 42
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 2f       	mov	r24, r24
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	84 70       	andi	r24, 0x04	; 4
    2bba:	90 70       	andi	r25, 0x00	; 0
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	91 f0       	breq	.+36     	; 0x2be4 <UART_sendByte+0x56>
	{
		UCSRB = (UCSRB & 0xFE) | (data>>8);
    2bc0:	aa e2       	ldi	r26, 0x2A	; 42
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	ea e2       	ldi	r30, 0x2A	; 42
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	28 2f       	mov	r18, r24
    2bcc:	2e 7f       	andi	r18, 0xFE	; 254
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	99 27       	eor	r25, r25
    2bd6:	82 2b       	or	r24, r18
    2bd8:	8c 93       	st	X, r24
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
		UDR = data;
    2bda:	ec e2       	ldi	r30, 0x2C	; 44
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	80 83       	st	Z, r24
    2be2:	04 c0       	rjmp	.+8      	; 0x2bec <UART_sendByte+0x5e>
	}
	else
	{
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
		UDR = data;
    2be4:	ec e2       	ldi	r30, 0x2C	; 44
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	80 83       	st	Z, r24
	}

}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <UART_sendString>:


void UART_sendString(const uint8 *Str)
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <UART_sendString+0x6>
    2bfc:	0f 92       	push	r0
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	9b 83       	std	Y+3, r25	; 0x03
    2c04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c06:	19 82       	std	Y+1, r1	; 0x01
    2c08:	10 c0       	rjmp	.+32     	; 0x2c2a <UART_sendString+0x34>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	fc 01       	movw	r30, r24
    2c16:	e2 0f       	add	r30, r18
    2c18:	f3 1f       	adc	r31, r19
    2c1a:	80 81       	ld	r24, Z
    2c1c:	88 2f       	mov	r24, r24
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <UART_sendByte>
		i++;
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	8f 5f       	subi	r24, 0xFF	; 255
    2c28:	89 83       	std	Y+1, r24	; 0x01


void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	9b 81       	ldd	r25, Y+3	; 0x03
    2c34:	fc 01       	movw	r30, r24
    2c36:	e2 0f       	add	r30, r18
    2c38:	f3 1f       	adc	r31, r19
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 23       	and	r24, r24
    2c3e:	29 f7       	brne	.-54     	; 0x2c0a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <UART_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void UART_setCallBack(void(*a_ptr)(void))
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <UART_setCallBack+0x6>
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	9a 83       	std	Y+2, r25	; 0x02
    2c58:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5e:	90 93 ef 00 	sts	0x00EF, r25
    2c62:	80 93 ee 00 	sts	0x00EE, r24
}
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <__udivmodsi4>:
    2c70:	a1 e2       	ldi	r26, 0x21	; 33
    2c72:	1a 2e       	mov	r1, r26
    2c74:	aa 1b       	sub	r26, r26
    2c76:	bb 1b       	sub	r27, r27
    2c78:	fd 01       	movw	r30, r26
    2c7a:	0d c0       	rjmp	.+26     	; 0x2c96 <__udivmodsi4_ep>

00002c7c <__udivmodsi4_loop>:
    2c7c:	aa 1f       	adc	r26, r26
    2c7e:	bb 1f       	adc	r27, r27
    2c80:	ee 1f       	adc	r30, r30
    2c82:	ff 1f       	adc	r31, r31
    2c84:	a2 17       	cp	r26, r18
    2c86:	b3 07       	cpc	r27, r19
    2c88:	e4 07       	cpc	r30, r20
    2c8a:	f5 07       	cpc	r31, r21
    2c8c:	20 f0       	brcs	.+8      	; 0x2c96 <__udivmodsi4_ep>
    2c8e:	a2 1b       	sub	r26, r18
    2c90:	b3 0b       	sbc	r27, r19
    2c92:	e4 0b       	sbc	r30, r20
    2c94:	f5 0b       	sbc	r31, r21

00002c96 <__udivmodsi4_ep>:
    2c96:	66 1f       	adc	r22, r22
    2c98:	77 1f       	adc	r23, r23
    2c9a:	88 1f       	adc	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	1a 94       	dec	r1
    2ca0:	69 f7       	brne	.-38     	; 0x2c7c <__udivmodsi4_loop>
    2ca2:	60 95       	com	r22
    2ca4:	70 95       	com	r23
    2ca6:	80 95       	com	r24
    2ca8:	90 95       	com	r25
    2caa:	9b 01       	movw	r18, r22
    2cac:	ac 01       	movw	r20, r24
    2cae:	bd 01       	movw	r22, r26
    2cb0:	cf 01       	movw	r24, r30
    2cb2:	08 95       	ret

00002cb4 <__prologue_saves__>:
    2cb4:	2f 92       	push	r2
    2cb6:	3f 92       	push	r3
    2cb8:	4f 92       	push	r4
    2cba:	5f 92       	push	r5
    2cbc:	6f 92       	push	r6
    2cbe:	7f 92       	push	r7
    2cc0:	8f 92       	push	r8
    2cc2:	9f 92       	push	r9
    2cc4:	af 92       	push	r10
    2cc6:	bf 92       	push	r11
    2cc8:	cf 92       	push	r12
    2cca:	df 92       	push	r13
    2ccc:	ef 92       	push	r14
    2cce:	ff 92       	push	r15
    2cd0:	0f 93       	push	r16
    2cd2:	1f 93       	push	r17
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	ca 1b       	sub	r28, r26
    2cde:	db 0b       	sbc	r29, r27
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	09 94       	ijmp

00002cec <__epilogue_restores__>:
    2cec:	2a 88       	ldd	r2, Y+18	; 0x12
    2cee:	39 88       	ldd	r3, Y+17	; 0x11
    2cf0:	48 88       	ldd	r4, Y+16	; 0x10
    2cf2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cf4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cf6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cf8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cfe:	b9 84       	ldd	r11, Y+9	; 0x09
    2d00:	c8 84       	ldd	r12, Y+8	; 0x08
    2d02:	df 80       	ldd	r13, Y+7	; 0x07
    2d04:	ee 80       	ldd	r14, Y+6	; 0x06
    2d06:	fd 80       	ldd	r15, Y+5	; 0x05
    2d08:	0c 81       	ldd	r16, Y+4	; 0x04
    2d0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d10:	ce 0f       	add	r28, r30
    2d12:	d1 1d       	adc	r29, r1
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	ed 01       	movw	r28, r26
    2d20:	08 95       	ret

00002d22 <itoa>:
    2d22:	fb 01       	movw	r30, r22
    2d24:	9f 01       	movw	r18, r30
    2d26:	e8 94       	clt
    2d28:	42 30       	cpi	r20, 0x02	; 2
    2d2a:	c4 f0       	brlt	.+48     	; 0x2d5c <itoa+0x3a>
    2d2c:	45 32       	cpi	r20, 0x25	; 37
    2d2e:	b4 f4       	brge	.+44     	; 0x2d5c <itoa+0x3a>
    2d30:	4a 30       	cpi	r20, 0x0A	; 10
    2d32:	29 f4       	brne	.+10     	; 0x2d3e <itoa+0x1c>
    2d34:	97 fb       	bst	r25, 7
    2d36:	1e f4       	brtc	.+6      	; 0x2d3e <itoa+0x1c>
    2d38:	90 95       	com	r25
    2d3a:	81 95       	neg	r24
    2d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3e:	64 2f       	mov	r22, r20
    2d40:	77 27       	eor	r23, r23
    2d42:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__udivmodhi4>
    2d46:	80 5d       	subi	r24, 0xD0	; 208
    2d48:	8a 33       	cpi	r24, 0x3A	; 58
    2d4a:	0c f0       	brlt	.+2      	; 0x2d4e <itoa+0x2c>
    2d4c:	89 5d       	subi	r24, 0xD9	; 217
    2d4e:	81 93       	st	Z+, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	a1 f7       	brne	.-24     	; 0x2d3e <itoa+0x1c>
    2d56:	16 f4       	brtc	.+4      	; 0x2d5c <itoa+0x3a>
    2d58:	5d e2       	ldi	r21, 0x2D	; 45
    2d5a:	51 93       	st	Z+, r21
    2d5c:	10 82       	st	Z, r1
    2d5e:	c9 01       	movw	r24, r18
    2d60:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <strrev>

00002d64 <strrev>:
    2d64:	dc 01       	movw	r26, r24
    2d66:	fc 01       	movw	r30, r24
    2d68:	67 2f       	mov	r22, r23
    2d6a:	71 91       	ld	r23, Z+
    2d6c:	77 23       	and	r23, r23
    2d6e:	e1 f7       	brne	.-8      	; 0x2d68 <strrev+0x4>
    2d70:	32 97       	sbiw	r30, 0x02	; 2
    2d72:	04 c0       	rjmp	.+8      	; 0x2d7c <strrev+0x18>
    2d74:	7c 91       	ld	r23, X
    2d76:	6d 93       	st	X+, r22
    2d78:	70 83       	st	Z, r23
    2d7a:	62 91       	ld	r22, -Z
    2d7c:	ae 17       	cp	r26, r30
    2d7e:	bf 07       	cpc	r27, r31
    2d80:	c8 f3       	brcs	.-14     	; 0x2d74 <strrev+0x10>
    2d82:	08 95       	ret

00002d84 <__udivmodhi4>:
    2d84:	aa 1b       	sub	r26, r26
    2d86:	bb 1b       	sub	r27, r27
    2d88:	51 e1       	ldi	r21, 0x11	; 17
    2d8a:	07 c0       	rjmp	.+14     	; 0x2d9a <__udivmodhi4_ep>

00002d8c <__udivmodhi4_loop>:
    2d8c:	aa 1f       	adc	r26, r26
    2d8e:	bb 1f       	adc	r27, r27
    2d90:	a6 17       	cp	r26, r22
    2d92:	b7 07       	cpc	r27, r23
    2d94:	10 f0       	brcs	.+4      	; 0x2d9a <__udivmodhi4_ep>
    2d96:	a6 1b       	sub	r26, r22
    2d98:	b7 0b       	sbc	r27, r23

00002d9a <__udivmodhi4_ep>:
    2d9a:	88 1f       	adc	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	5a 95       	dec	r21
    2da0:	a9 f7       	brne	.-22     	; 0x2d8c <__udivmodhi4_loop>
    2da2:	80 95       	com	r24
    2da4:	90 95       	com	r25
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	08 95       	ret

00002dac <_exit>:
    2dac:	f8 94       	cli

00002dae <__stop_program>:
    2dae:	ff cf       	rjmp	.-2      	; 0x2dae <__stop_program>
